{
	"info": {
		"_postman_id": "ai-ticket-creator-complete-2025",
		"name": "AI Ticket Creator Backend API - Complete (Latest Architecture)",
		"description": "Complete API collection for AI-powered ticket creation and management system with modern multi-agent architecture, comprehensive member management, and extensive integrations.\n\n## üîê Authentication Setup for Postman Testing\n\n### **Step 1: Get Clerk JWT Token**\n1. Open your frontend application in a browser\n2. Log in with your Clerk account\n3. Open browser developer console (F12)\n4. Run: `await window.Clerk.session.getToken()`\n5. Copy the returned JWT token\n6. Set it as `CLERK_JWT_TOKEN` in Postman environment\n\n### **Step 2: Generate API Key**\n1. Use the \"Generate API Key for Testing\" request\n2. This exchanges your Clerk JWT for a long-lived API key\n3. The API key is automatically saved as `ACCESS_TOKEN`\n4. Use this API key for all subsequent requests\n\n### **Alternative: Use Existing API Token Management**\n- Use the `/api/v1/api-tokens` endpoints to manage API keys\n- Generate tokens with custom names and permissions\n- Revoke tokens when no longer needed\n\n## Key Features\n\n### üßë‚Äçüíº Member Management\n- **Role-Based Access Control**: Admin and Member roles with proper permission enforcement\n- **Invitation System**: Secure token-based invitations with expiration tracking\n- **Organization Discovery**: Automatic domain-based organization matching\n- **Security Controls**: Self-role modification prevention, last admin protection\n- **Auto-Admin Promotion**: Intelligent admin promotion when needed\n- **Cross-Organization Isolation**: Complete data isolation between organizations\n\n### ü§ñ AI Agent System\n- **Multi-Agent Architecture**: Multiple specialized agents per organization\n- **Rich Configuration**: 20+ typed configuration fields for precise agent behavior\n- **Change History**: Complete audit trail with rollback capabilities\n- **File Context Integration**: Process up to 20 files per agent for enhanced context\n- **Avatar Management**: Dedicated avatar upload/management system\n- **Task Processing**: Queue-based autonomous task handling\n\n### üí¨ Agent-Centric Chat\n- **Thread Management**: Create, update, delete conversation threads per agent\n- **Context-Aware AI**: Agents use their specific configuration and file context\n- **Real-time Processing**: WebSocket support for live conversations\n- **Title Generation**: AI-powered thread title suggestions\n- **Message History**: Full conversation history with search and filtering\n\n### üé´ Advanced Ticketing\n- **AI-Powered Creation**: Natural language ticket creation with context analysis\n- **Multi-Stage Workflow**: Status management with rich metadata\n- **File Attachments**: OCR, transcription, and document processing\n- **Integration Routing**: Automatic routing to appropriate external systems\n- **Analytics & Stats**: Comprehensive reporting and performance metrics\n\n### üîó Integration Platform\n- **Category-Based System**: 7 functional categories (ticketing, CRM, messaging, etc.)\n- **Platform Identification**: Support for JIRA, Salesforce, GitHub, Slack, Teams, Zoom\n- **Automatic Status Management**: Smart status handling and health monitoring\n- **Field Discovery**: Dynamic field mapping for JIRA and other systems\n- **Testing & Validation**: Built-in connection testing and validation\n\n### üë• User Management\n- **Avatar System**: User avatar upload with multiple sizes and caching\n- **Profile Management**: Comprehensive user profile with preferences\n- **Organization Context**: Full organization membership and role management\n\n## Authentication Architecture\n- **Frontend Users**: Authenticate via Clerk (OAuth/SSO providers)\n- **API Testing**: Use Clerk JWT ‚Üí API Key exchange for long-lived tokens\n- **Service-to-Service**: Direct API key authentication\n- **Hybrid Support**: System validates both Clerk JWTs and API keys\n\n## Environment Variables\nKey variables for testing:\n- `BASE_URL`: API base URL (default: http://localhost:8000)\n- `CLERK_JWT_TOKEN`: JWT from Clerk frontend authentication\n- `API_KEY`: Long-lived API key for testing (auto-generated)\n- `ACCESS_TOKEN`: Current token (auto-populated with API key)\n- `USER_ID`, `ORGANIZATION_ID`: User context (auto-populated)\n- Integration credentials for external system testing\n\n## Base URL\n- **Local Development**: http://localhost:8000\n- **API Documentation**: http://localhost:8000/docs\n- **Health Check**: http://localhost:8000/health",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ai-ticket-creator"
	},
	"item": [
		{
			"name": "üîê Authentication & Users",
			"item": [
				{
					"name": "Check Email Availability",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{TEST_EMAIL}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/check-email",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "check-email"]
						},
						"description": "Check if an email address is available for registration. Returns availability status and helpful messages."
					},
					"response": []
				},
				{
					"name": "Register User with Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{USER_EMAIL}}\",\n  \"full_name\": \"{{USER_FULL_NAME}}\",\n  \"password\": \"{{USER_PASSWORD}}\",\n  \"organization_name\": \"{{ORGANIZATION_NAME}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/register",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "register"]
						},
						"description": "Register a new user account with organization. Auto-creates organization if needed and assigns appropriate role."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('USER_ID', response.id);",
									"    pm.environment.set('ORGANIZATION_ID', response.organization_id);",
									"    console.log('User registered successfully:', response.email);",
									"    console.log('Organization:', response.organization_name);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Generate API Key for Testing (Clerk Users)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CLERK_JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/generate-api-key",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "generate-api-key"]
						},
						"description": "Generate a long-lived API key for Postman testing. Requires Clerk JWT token from frontend authentication.\n\n**How to get CLERK_JWT_TOKEN:**\n1. Log into your frontend application\n2. Open browser console\n3. Run: `await window.Clerk.session.getToken()`\n4. Copy the token and set as CLERK_JWT_TOKEN environment variable\n5. Call this endpoint to generate API key\n6. Use the returned API key for all subsequent Postman requests"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('API_KEY', response.api_key);",
									"    pm.environment.set('API_TOKEN_ID', response.token_id);",
									"    pm.environment.set('USER_ID', response.user_id || '');",
									"    pm.environment.set('ORGANIZATION_ID', response.organization_id);",
									"    console.log('‚úÖ API Key generated successfully!');",
									"    console.log('üîë API Key:', response.api_key);",
									"    console.log('üìã Copy this API key to your environment variables');",
									"    console.log('‚è∞ Expires:', response.expires_at);",
									"    console.log('üìñ Setup Instructions:', response.instructions.postman_setup);",
									"    ",
									"    // Update ACCESS_TOKEN to use API key for subsequent requests",
									"    pm.environment.set('ACCESS_TOKEN', response.api_key);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{REFRESH_TOKEN}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/refresh",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "refresh"]
						},
						"description": "Refresh JWT access token using refresh token."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('ACCESS_TOKEN', response.access_token);",
									"    pm.environment.set('REFRESH_TOKEN', response.refresh_token);",
									"    console.log('Token refreshed successfully');",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Get Current User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/me",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "me"]
						},
						"description": "Get current authenticated user's profile information including organization details."
					}
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Updated Admin User\",\n  \"timezone\": \"America/New_York\",\n  \"language\": \"en\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/me",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "me"]
						},
						"description": "Update current user's profile information."
					}
				},
				{
					"name": "Logout User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/logout",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "logout"]
						},
						"description": "Logout user (client-side token invalidation)."
					}
				},
				{
					"name": "Verify Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/verify",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "verify"]
						},
						"description": "Verify if current JWT token is valid and get user information."
					}
				}
			],
			"description": "User authentication, registration, and profile management endpoints. Uses Clerk for frontend auth and API keys for testing."
		},
		{
			"name": "üîë API Token Management",
			"item": [
				{
					"name": "Generate API Token (Alternative Method)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CLERK_JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Development Testing\",\n  \"permissions\": [\"*\"],\n  \"expires_days\": 90\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens"]
						},
						"description": "Generate organization-scoped API token using the full API token management system. Requires Clerk JWT and proper organization context."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('API_KEY', response.token);",
									"    pm.environment.set('API_TOKEN_ID', response.token_id);",
									"    console.log('‚úÖ API Token generated:', response.name);",
									"    console.log('üîë Token:', response.token);",
									"    console.log('‚è∞ Expires:', response.expires_at);",
									"    ",
									"    // Update ACCESS_TOKEN to use API key",
									"    pm.environment.set('ACCESS_TOKEN', response.token);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "List API Tokens",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens"]
						},
						"description": "List all API tokens for the current user and organization."
					}
				},
				{
					"name": "Get API Token Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Get details of a specific API token."
					}
				},
				{
					"name": "Update API Token (PUT - Full Update)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Development Testing\",\n  \"permissions\": [\"*\"],\n  \"expires_days\": 120,\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Update all fields of an API token. Requires all fields in request body. Use this for complete token updates."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ API Token updated:', response.token.name);",
									"    console.log('üîß Updated fields: all');",
									"    console.log('üìÖ New expires:', response.token.expires_at);",
									"    console.log('‚úîÔ∏è Active:', response.token.is_active);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Update API Token (PATCH - Partial Update)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Partially update an API token. Include only the fields you want to change. Perfect for deactivating tokens: {\"is_active\": false}"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ API Token partially updated:', response.token.name);",
									"    console.log('üîß Updated fields:', response.message.match(/\\(([^)]+)\\)/)?.[1] || 'unknown');",
									"    console.log('‚úîÔ∏è Active:', response.token.is_active);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Deactivate API Token (Quick PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Quick way to deactivate an API token without deleting it. Token becomes unusable but remains in database for audit purposes."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üö´ API Token deactivated:', response.token.name);",
									"    console.log('‚úîÔ∏è Active:', response.token.is_active);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Reactivate API Token (Quick PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Reactivate a previously deactivated API token. Makes the token usable again."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ API Token reactivated:', response.token.name);",
									"    console.log('‚úîÔ∏è Active:', response.token.is_active);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Delete API Token (Permanent)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/api-tokens/{{API_TOKEN_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "api-tokens", "{{API_TOKEN_ID}}"]
						},
						"description": "Permanently delete an API token from the database. This action cannot be undone. For temporary deactivation, use the PATCH endpoint instead."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('üóëÔ∏è API Token deleted:', response.message);",
									"    console.log('üïí Deleted at:', response.revoked_at);",
									"}"
								]
							}
						}
					]
				}
			],
			"description": "Complete API token management system with full CRUD operations. Generate, list, update (full/partial), activate/deactivate, and permanently delete API tokens. Supports fine-grained permission control and audit logging.",
			"event": []
		},
		{
			"name": "üë§ User Avatars",
			"item": [
				{
					"name": "Upload User Avatar",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"description": "Image file (JPG, PNG, GIF, HEIC, WebP)"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar"]
						},
						"description": "Upload a new avatar image for a user. Supports multiple formats and generates thumbnail sizes."
					}
				},
				{
					"name": "Get User Avatar",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar?size=medium",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar"],
							"query": [
								{
									"key": "size",
									"value": "medium",
									"description": "Avatar size (small, medium, large)"
								}
							]
						},
						"description": "Get user's avatar image file. No authentication required for viewing avatars."
					}
				},
				{
					"name": "Get User Avatar Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar/info",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar", "info"]
						},
						"description": "Get avatar metadata including URLs for different sizes and file information."
					}
				},
				{
					"name": "Delete User Avatar",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar"]
						},
						"description": "Delete user's avatar image."
					}
				}
			],
			"description": "User avatar management including upload, retrieval, and deletion with multiple size support."
		},
		{
			"name": "ü§ñ Agent Management",
			"item": [
				{
					"name": "Create Agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Customer Support Agent\",\n  \"agent_type\": \"customer_support\",\n  \"role\": \"Primary customer support representative for handling inquiries\",\n  \"prompt\": \"You are a friendly and knowledgeable customer support agent. Help users with their questions and issues professionally.\",\n  \"initial_context\": \"Welcome to our support system! I'm here to help you with any questions or issues.\",\n  \"initial_ai_msg\": \"Hello! I'm your customer support agent. How can I assist you today?\",\n  \"tone\": \"friendly\",\n  \"communication_style\": \"professional\",\n  \"use_streaming\": true,\n  \"response_length\": \"moderate\",\n  \"memory_retention\": 10,\n  \"show_suggestions_after_each_message\": true,\n  \"suggestions_prompt\": \"Provide 3 helpful follow-up questions the user might ask\",\n  \"max_context_size\": 50000,\n  \"use_memory_context\": true,\n  \"max_iterations\": 5,\n  \"timeout_seconds\": 30,\n  \"tools_enabled\": [\"search\", \"knowledge_base\", \"ticket_creation\"]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents"]
						},
						"description": "Create a new AI agent with comprehensive configuration including behavior, tools, and communication style."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('AGENT_ID', response.id);",
									"    if (response.agent_type === 'customer_support') {",
									"        pm.environment.set('SUPPORT_AGENT_ID', response.id);",
									"    }",
									"    console.log('Agent created:', response.name);",
									"    console.log('Agent ID:', response.id);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "List Organization Agents",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents?page=1&limit=50&agent_type=customer_support&include_inactive=false",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "limit",
									"value": "50",
									"description": "Items per page (max 100)"
								},
								{
									"key": "agent_type",
									"value": "customer_support",
									"description": "Filter by agent type"
								},
								{
									"key": "include_inactive",
									"value": "false",
									"description": "Include inactive agents"
								}
							]
						},
						"description": "List all agents for the current organization with pagination and filtering options."
					}
				},
				{
					"name": "Get Agent Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}"]
						},
						"description": "Get detailed information about a specific agent including full configuration."
					}
				},
				{
					"name": "Update Agent",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Enhanced Customer Support Agent\",\n  \"is_active\": true,\n  \"role\": \"Enhanced customer support with advanced capabilities\",\n  \"prompt\": \"You are an advanced AI customer support agent with access to comprehensive tools and knowledge.\",\n  \"tone\": \"empathetic\",\n  \"communication_style\": \"conversational\",\n  \"memory_retention\": 15,\n  \"response_length\": \"detailed\",\n  \"tools_enabled\": [\"search\", \"knowledge_base\", \"ticket_creation\", \"escalation\"]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}"]
						},
						"description": "Update agent configuration with partial or complete field updates."
					}
				},
				{
					"name": "Delete Agent",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}"]
						},
						"description": "Soft delete an agent (marks as inactive but preserves history)."
					}
				},
				{
					"name": "Get Agent Change History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}/history?page=1&limit=50&change_type=update&field_filter=name",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}", "history"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "limit",
									"value": "50",
									"description": "Items per page"
								},
								{
									"key": "change_type",
									"value": "update",
									"description": "Filter by change type (create, update, delete)"
								},
								{
									"key": "field_filter",
									"value": "name",
									"description": "Filter by field name"
								}
							]
						},
						"description": "Get complete change history for an agent with filtering options."
					}
				}
			],
			"description": "AI agent management including CRUD operations and change history tracking. Supports multiple agents per organization with rich configuration options."
		},
		{
			"name": "üñºÔ∏è Agent Avatars",
			"item": [
				{
					"name": "Upload Agent Avatar",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"description": "Image file (JPG, PNG, GIF, HEIC, WebP)"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agent-avatars/{{AGENT_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agent-avatars", "{{AGENT_ID}}", "avatar"]
						},
						"description": "Upload avatar image for an agent. Generates multiple thumbnail sizes."
					}
				},
				{
					"name": "Get Agent Avatar",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agent-avatars/{{AGENT_ID}}/avatar?size=medium",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agent-avatars", "{{AGENT_ID}}", "avatar"],
							"query": [
								{
									"key": "size",
									"value": "medium",
									"description": "Avatar size (small, medium, large)"
								}
							]
						},
						"description": "Get agent's avatar image. No authentication required."
					}
				},
				{
					"name": "Get Agent Avatar Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agent-avatars/{{AGENT_ID}}/avatar/info",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agent-avatars", "{{AGENT_ID}}", "avatar", "info"]
						},
						"description": "Get agent avatar metadata including all thumbnail sizes and file information."
					}
				},
				{
					"name": "Delete Agent Avatar",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agent-avatars/{{AGENT_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agent-avatars", "{{AGENT_ID}}", "avatar"]
						},
						"description": "Delete agent's avatar image."
					}
				}
			],
			"description": "Agent avatar management with support for multiple sizes and formats."
		},
		{
			"name": "üí¨ Agent Chat System",
			"item": [
				{
					"name": "List Agent Threads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads?archived=false&q=support&page=1&page_size=20",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads"],
							"query": [
								{
									"key": "archived",
									"value": "false",
									"description": "Filter by archive status"
								},
								{
									"key": "q",
									"value": "support",
									"description": "Search threads by title and content"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "page_size",
									"value": "20",
									"description": "Page size (max 100)"
								}
							]
						},
						"description": "List chat threads for a specific agent with search and filtering options."
					}
				},
				{
					"name": "Create Chat Thread",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Customer Support Inquiry\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads"]
						},
						"description": "Create a new chat thread for an agent. Title is optional and can be auto-generated."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('THREAD_ID', response.id);",
									"    console.log('Thread created:', response.id);",
									"    console.log('Title:', response.title);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Get Chat Thread",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}?include_messages=true",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"],
							"query": [
								{
									"key": "include_messages",
									"value": "true",
									"description": "Include messages in response"
								}
							]
						},
						"description": "Get a specific chat thread with optional message history."
					}
				},
				{
					"name": "Send Message to Agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Hello! I need help with my account. I'm having trouble logging in and resetting my password. Can you guide me through the process?\",\n  \"attachments\": []\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/messages",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "messages"]
						},
						"description": "Send a message to an agent and receive AI response. Supports file attachments and context awareness."
					}
				},
				{
					"name": "Update Thread",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Account Access Support - Resolved\",\n  \"archived\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"]
						},
						"description": "Update thread title, archive status, or other metadata."
					}
				},
				{
					"name": "Generate Thread Title",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/generate_title",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "generate_title"]
						},
						"description": "AI-powered thread title generation based on conversation content."
					}
				},
				{
					"name": "Get Thread Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/messages?page=1&page_size=100",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "messages"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "page_size",
									"value": "100",
									"description": "Page size (max 200)"
								}
							]
						},
						"description": "Get all messages for a thread with pagination."
					}
				},
				{
					"name": "Delete Thread",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"]
						},
						"description": "Delete a chat thread (soft delete by archiving)."
					}
				}
			],
			"description": "Agent-centric chat system with thread management, message handling, and AI-powered responses. Each agent maintains separate conversation threads with context awareness."
		},
		{
			"name": "üé´ Ticket Management",
			"item": [
				{
					"name": "List Tickets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets?page=1&size=20&q=bug&status=open,in_progress&category=technical&priority=high&sort_by=created_at&sort_order=desc",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "size",
									"value": "20",
									"description": "Page size"
								},
								{
									"key": "q",
									"value": "bug",
									"description": "Search query"
								},
								{
									"key": "status",
									"value": "open,in_progress",
									"description": "Filter by status"
								},
								{
									"key": "category",
									"value": "technical",
									"description": "Filter by category"
								},
								{
									"key": "priority",
									"value": "high",
									"description": "Filter by priority"
								},
								{
									"key": "sort_by",
									"value": "created_at",
									"description": "Sort field"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order"
								}
							]
						},
						"description": "List tickets with comprehensive search, filtering, and sorting options."
					}
				},
				{
					"name": "Create Ticket (Standard)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Application Login Issue - Unable to Access Dashboard\",\n  \"description\": \"Users are reporting inability to log into the application. After entering correct credentials, the page redirects to a blank screen instead of the dashboard. This appears to affect multiple users across different browsers. Steps to reproduce: 1. Navigate to login page 2. Enter valid credentials 3. Click login button 4. Observe blank page instead of dashboard.\",\n  \"category\": \"technical\",\n  \"priority\": \"high\",\n  \"urgency\": \"high\",\n  \"department\": \"Engineering\",\n  \"assigned_to_id\": null,\n  \"integration_id\": \"{{INTEGRATION_ID}}\",\n  \"create_externally\": true,\n  \"custom_fields\": {\n    \"environment\": \"production\",\n    \"browser_versions\": \"Chrome 118+, Firefox 119+\",\n    \"affected_users\": \"~50 users\"\n  },\n  \"file_ids\": []\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets"]
						},
						"description": "Create a new ticket with standard field entry and optional external integration routing."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('TICKET_ID', response.id);",
									"    console.log('Ticket created:', response.title);",
									"    console.log('Ticket ID:', response.id);",
									"    if (response.external_ticket_id) {",
									"        console.log('External ticket ID:', response.external_ticket_id);",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Create Ticket with AI",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_input\": \"Hey, I'm having a really frustrating issue with the mobile app. Every time I try to upload a photo to my profile, the app just crashes completely and I have to restart it. This has been happening for the past week on my iPhone 14 Pro running iOS 16.5. I've tried deleting and reinstalling the app but it's still not working. My photos are really important to me and I need this fixed ASAP because I'm trying to update my business profile before a big meeting tomorrow. Can someone please help me figure out what's going on?\",\n  \"uploaded_files\": [],\n  \"conversation_context\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"I mentioned earlier that I'm using the latest version of the app\",\n      \"timestamp\": \"2024-01-15T10:30:00Z\"\n    }\n  ],\n  \"user_preferences\": {\n    \"priority_preference\": \"urgent\",\n    \"communication_style\": \"direct\",\n    \"technical_level\": \"intermediate\"\n  },\n  \"integration_id\": \"{{INTEGRATION_ID}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/ai-create",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "ai-create"]
						},
						"description": "Create a ticket using AI analysis of natural language input. The AI will extract key information, categorize the issue, set priority, and structure the ticket appropriately."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('TICKET_ID', response.ticket.id);",
									"    console.log('AI Ticket created:', response.ticket.title);",
									"    console.log('AI Confidence:', response.confidence_score);",
									"    console.log('Category:', response.ticket.category);",
									"    console.log('Priority:', response.ticket.priority);",
									"    if (response.suggested_actions) {",
									"        console.log('Suggested actions:', response.suggested_actions);",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Get Ticket Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}?include_ai_data=true&include_internal=false",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"],
							"query": [
								{
									"key": "include_ai_data",
									"value": "true",
									"description": "Include AI analysis data"
								},
								{
									"key": "include_internal",
									"value": "false",
									"description": "Include internal notes"
								}
							]
						},
						"description": "Get detailed ticket information including AI analysis and optional internal data."
					}
				},
				{
					"name": "Update Ticket (Full)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Application Login Issue - Unable to Access Dashboard [RESOLVED]\",\n  \"description\": \"Users were reporting inability to log into the application. Issue was identified as session management bug in version 2.1.0. Fixed in hotfix 2.1.1 deployed on 2024-01-15.\",\n  \"category\": \"technical\",\n  \"priority\": \"medium\",\n  \"urgency\": \"low\",\n  \"status\": \"resolved\",\n  \"department\": \"Engineering\",\n  \"assigned_to_id\": \"{{USER_ID}}\",\n  \"integration_id\": \"{{INTEGRATION_ID}}\",\n  \"custom_fields\": {\n    \"environment\": \"production\",\n    \"resolution_method\": \"hotfix_deployment\",\n    \"affected_users\": \"~50 users\",\n    \"fix_version\": \"2.1.1\"\n  },\n  \"internal_notes\": \"Hotfix deployed successfully. Monitoring for 24 hours to ensure no regression.\",\n  \"resolution_summary\": \"Session management bug in authentication service was causing login redirects to fail. Fixed by updating session cookie handling logic and deploying hotfix 2.1.1.\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"]
						},
						"description": "Full ticket update with all fields. Use this for complete ticket information updates."
					}
				},
				{
					"name": "Patch Ticket (Partial Update)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"in_progress\",\n  \"priority\": \"high\",\n  \"assigned_to_id\": \"{{USER_ID}}\",\n  \"assignment_reason\": \"Escalating to senior engineer due to production impact\",\n  \"tags\": [\"production\", \"urgent\", \"login-issue\"],\n  \"internal_notes\": \"Escalated due to increasing user complaints. Investigating session management service.\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"]
						},
						"description": "Flexible partial ticket updates. Update any combination of fields in a single request. Supports status changes, assignments, priority updates, and metadata."
					}
				},
				{
					"name": "Get Ticket Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/stats/overview",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "stats", "overview"]
						},
						"description": "Get comprehensive ticket statistics including counts by status, category, priority, and performance metrics."
					}
				},
				{
					"name": "Delete Ticket",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"]
						},
						"description": "Soft delete a ticket (marks as deleted but preserves data for audit purposes)."
					}
				}
			],
			"description": "Comprehensive ticket management system with AI-powered creation, flexible updates, and detailed analytics. Supports both manual and AI-assisted ticket creation workflows."
		},
		{
			"name": "üîó Integration Management",
			"item": [
				{
					"name": "Create JIRA Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Main JIRA Instance\",\n  \"integration_category\": \"ticketing\",\n  \"platform_name\": \"jira\",\n  \"description\": \"Primary JIRA integration for ticket routing and project management\",\n  \"enabled\": true,\n  \"base_url\": \"{{JIRA_URL}}\",\n  \"api_version\": \"2\",\n  \"auth_type\": \"api_key\",\n  \"credentials\": {\n    \"email\": \"{{JIRA_EMAIL}}\",\n    \"api_token\": \"{{JIRA_API_TOKEN}}\"\n  },\n  \"oauth_scopes\": [],\n  \"routing_rules\": {\n    \"default_project\": \"{{JIRA_PROJECT_KEY}}\",\n    \"issue_type_mapping\": {\n      \"bug\": \"Bug\",\n      \"technical\": \"Task\",\n      \"feature_request\": \"Story\"\n    },\n    \"priority_mapping\": {\n      \"low\": \"Low\",\n      \"medium\": \"Medium\",\n      \"high\": \"High\",\n      \"critical\": \"Highest\"\n    }\n  },\n  \"default_priority\": 100,\n  \"supports_categories\": [\"technical\", \"bug\", \"feature_request\"],\n  \"supports_priorities\": [\"low\", \"medium\", \"high\", \"critical\"],\n  \"department_mapping\": {\n    \"Engineering\": \"{{JIRA_PROJECT_KEY}}\",\n    \"Support\": \"{{JIRA_PROJECT_KEY}}\"\n  },\n  \"custom_fields_mapping\": {\n    \"environment\": \"customfield_10001\",\n    \"affected_users\": \"customfield_10002\"\n  },\n  \"webhook_url\": null,\n  \"webhook_secret\": null,\n  \"sync_enabled\": true,\n  \"sync_frequency_minutes\": 30,\n  \"rate_limit_per_hour\": 1000,\n  \"notification_events\": [\"ticket_created\", \"ticket_updated\", \"ticket_resolved\"],\n  \"notification_channels\": {\n    \"slack\": {\n      \"webhook_url\": \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\",\n      \"channel\": \"#integrations\"\n    }\n  },\n  \"environment\": \"production\",\n  \"region\": null\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations"]
						},
						"description": "Create a comprehensive JIRA integration with field mappings, routing rules, and notification settings."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('INTEGRATION_ID', response.id);",
									"    console.log('JIRA Integration created:', response.name);",
									"    console.log('Integration ID:', response.id);",
									"    console.log('Status:', response.status);",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Create Salesforce Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Salesforce Production\",\n  \"integration_category\": \"crm\",\n  \"platform_name\": \"salesforce\",\n  \"description\": \"Production Salesforce instance for customer case management\",\n  \"enabled\": true,\n  \"base_url\": \"{{SALESFORCE_INSTANCE_URL}}\",\n  \"api_version\": \"58.0\",\n  \"auth_type\": \"oauth2\",\n  \"credentials\": {\n    \"username\": \"{{SALESFORCE_USERNAME}}\",\n    \"password\": \"{{SALESFORCE_PASSWORD}}\",\n    \"security_token\": \"{{SALESFORCE_SECURITY_TOKEN}}\",\n    \"client_id\": \"{{SALESFORCE_CLIENT_ID}}\",\n    \"client_secret\": \"{{SALESFORCE_CLIENT_SECRET}}\"\n  },\n  \"oauth_scopes\": [\"api\", \"refresh_token\"],\n  \"routing_rules\": {\n    \"default_case_origin\": \"Web\",\n    \"default_case_priority\": \"Medium\",\n    \"case_record_type\": \"Support Case\",\n    \"priority_mapping\": {\n      \"low\": \"Low\",\n      \"medium\": \"Medium\",\n      \"high\": \"High\",\n      \"critical\": \"Critical\"\n    }\n  },\n  \"default_priority\": 200,\n  \"supports_categories\": [\"billing\", \"user_access\", \"general\"],\n  \"supports_priorities\": [\"low\", \"medium\", \"high\", \"critical\"],\n  \"department_mapping\": {\n    \"Sales\": \"Sales\",\n    \"Support\": \"Customer Support\"\n  },\n  \"custom_fields_mapping\": {\n    \"account_id\": \"Account__c\",\n    \"contact_method\": \"Preferred_Contact_Method__c\"\n  },\n  \"webhook_url\": null,\n  \"webhook_secret\": null,\n  \"sync_enabled\": true,\n  \"sync_frequency_minutes\": 15,\n  \"rate_limit_per_hour\": 500,\n  \"notification_events\": [\"case_created\", \"case_updated\", \"case_closed\"],\n  \"notification_channels\": {},\n  \"environment\": \"production\",\n  \"region\": \"us\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations"]
						},
						"description": "Create a Salesforce integration with OAuth2 authentication and comprehensive case management settings."
					}
				},
				{
					"name": "List Integrations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations?offset=0&limit=20&integration_category=ticketing&enabled=true&name=jira&sort_by=created_at&sort_order=desc",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations"],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "Number of records to skip"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Maximum records to return"
								},
								{
									"key": "integration_category",
									"value": "ticketing",
									"description": "Filter by category"
								},
								{
									"key": "enabled",
									"value": "true",
									"description": "Filter by enabled status"
								},
								{
									"key": "name",
									"value": "jira",
									"description": "Filter by name (partial match)"
								},
								{
									"key": "sort_by",
									"value": "created_at",
									"description": "Sort field"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order"
								}
							]
						},
						"description": "List integrations with comprehensive filtering and sorting options."
					}
				},
				{
					"name": "Get Integration Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}?include_stats=true",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"],
							"query": [
								{
									"key": "include_stats",
									"value": "true",
									"description": "Include usage statistics"
								}
							]
						},
						"description": "Get detailed integration information including configuration and usage statistics (credentials are excluded for security)."
					}
				},
				{
					"name": "Update Integration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated JIRA Integration\",\n  \"description\": \"Enhanced JIRA integration with updated field mappings\",\n  \"enabled\": true,\n  \"base_url\": \"{{JIRA_URL}}\",\n  \"api_version\": \"3\",\n  \"credentials\": {\n    \"email\": \"{{JIRA_EMAIL}}\",\n    \"api_token\": \"{{JIRA_API_TOKEN}}\"\n  },\n  \"configuration\": {\n    \"default_project\": \"{{JIRA_PROJECT_KEY}}\",\n    \"default_issue_type\": \"Task\",\n    \"auto_assign\": false\n  },\n  \"oauth_scopes\": [],\n  \"routing_rules\": {\n    \"updated_rule\": \"new_value\"\n  },\n  \"default_priority\": 150,\n  \"supports_categories\": [\"technical\", \"bug\", \"feature_request\", \"integration\"],\n  \"supports_priorities\": [\"low\", \"medium\", \"high\", \"critical\"],\n  \"department_mapping\": {\n    \"Engineering\": \"{{JIRA_PROJECT_KEY}}\",\n    \"Support\": \"{{JIRA_PROJECT_KEY}}\",\n    \"QA\": \"{{JIRA_PROJECT_KEY}}\"\n  },\n  \"custom_fields_mapping\": {\n    \"environment\": \"customfield_10001\",\n    \"affected_users\": \"customfield_10002\",\n    \"severity\": \"customfield_10003\"\n  },\n  \"webhook_url\": \"https://api.company.com/webhooks/jira\",\n  \"webhook_secret\": \"secret123\",\n  \"sync_enabled\": true,\n  \"sync_frequency_minutes\": 20,\n  \"rate_limit_per_hour\": 1500,\n  \"notification_events\": [\"ticket_created\", \"ticket_updated\", \"ticket_resolved\", \"ticket_closed\"],\n  \"notification_channels\": {\n    \"slack\": {\n      \"webhook_url\": \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\",\n      \"channel\": \"#jira-notifications\"\n    },\n    \"email\": {\n      \"recipients\": [\"admin@company.com\", \"support@company.com\"]\n    }\n  },\n  \"environment\": \"production\",\n  \"region\": \"us-east-1\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"]
						},
						"description": "Update integration configuration including credentials, mappings, and notification settings."
					}
				},
				{
					"name": "Test Integration Connection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"test_types\": [\"connection\", \"authentication\", \"project_access\"],\n  \"test_data\": {\n    \"project_key\": \"{{JIRA_PROJECT_KEY}}\",\n    \"test_summary\": \"API Connection Test\",\n    \"test_description\": \"Testing integration connectivity and permissions\"\n  },\n  \"auto_activate_on_success\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/test",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "test"]
						},
						"description": "Test integration connection, authentication, and functionality. Can automatically activate integration on successful test."
					}
				},
				{
					"name": "Sync Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sync_type\": \"full\",\n  \"direction\": \"bidirectional\",\n  \"dry_run\": false,\n  \"filters\": {\n    \"updated_since\": \"2024-01-01T00:00:00Z\",\n    \"project_keys\": [\"{{JIRA_PROJECT_KEY}}\"],\n    \"status_filter\": [\"Open\", \"In Progress\", \"Resolved\"]\n  }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/sync",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "sync"]
						},
						"description": "Manually trigger integration synchronization with filtering options and dry run capability."
					}
				},
				{
					"name": "Update Integration Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": false,\n  \"reason\": \"Temporarily disabling for maintenance\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/status",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "status"]
						},
						"description": "Enable or disable an integration with optional reason."
					}
				},
				{
					"name": "Get Active Integrations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/active?supports_category={{CATEGORY_FILTER}}&integration_category=ticketing",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "active"],
							"query": [
								{
									"key": "supports_category",
									"value": "{{CATEGORY_FILTER}}",
									"description": "Filter by category support"
								},
								{
									"key": "integration_category",
									"value": "ticketing",
									"description": "Filter by integration category"
								}
							]
						},
						"description": "Get list of active integrations available for ticket creation with filtering options."
					}
				},
				{
					"name": "Activate Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/activate",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "activate"]
						},
						"description": "Manually activate an integration that has passed tests and is in pending status."
					}
				},
				{
					"name": "Get Integration Fields (JIRA)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/fields?field_type=custom&search=priority",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "fields"],
							"query": [
								{
									"key": "field_type",
									"value": "custom",
									"description": "Filter by field type (custom, system)"
								},
								{
									"key": "search",
									"value": "priority",
									"description": "Search field names"
								}
							]
						},
						"description": "Discover available fields for JIRA integration including custom field IDs for mapping configuration."
					}
				},
				{
					"name": "Delete Integration",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"]
						},
						"description": "Soft delete an integration (preserves data for audit purposes)."
					}
				}
			],
			"description": "Comprehensive integration management for JIRA, Salesforce, and other third-party systems. Includes connection testing, field discovery, synchronization, and health monitoring."
		},
		{
			"name": "üë• Member Management",
			"item": [
				{
					"name": "List Organization Members",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/members?role=admin&active=true&page=1&limit=50",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "members"],
							"query": [
								{
									"key": "role",
									"value": "admin",
									"description": "Filter by role (admin, member)"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Filter by active status"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "limit",
									"value": "50",
									"description": "Results per page"
								}
							]
						},
						"description": "List all members of current user's organization with filtering and pagination."
					}
				},
				{
					"name": "Get Organization Member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/members/{{USER_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "members", "{{USER_ID}}"]
						},
						"description": "Get detailed information about a specific organization member."
					}
				},
				{
					"name": "Update Member Role",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/members/{{USER_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "members", "{{USER_ID}}"]
						},
						"description": "Update a member's role within the organization. Requires admin permissions."
					}
				},
				{
					"name": "Invite Organization Member",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newmember@company.com\",\n  \"role\": \"member\",\n  \"send_email\": true,\n  \"message\": \"Welcome to our organization! We're excited to have you join our team.\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/{{ORGANIZATION_ID}}/members/invite",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "{{ORGANIZATION_ID}}", "members", "invite"]
						},
						"description": "Send an invitation to join the organization with specified role and optional custom message."
					}
				},
				{
					"name": "Update Member Role (by Org ID)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/{{ORGANIZATION_ID}}/members/{{USER_ID}}/role",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "{{ORGANIZATION_ID}}", "members", "{{USER_ID}}", "role"]
						},
						"description": "Update member's role using organization ID and user ID path parameters."
					}
				},
				{
					"name": "Remove Organization Member",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/{{ORGANIZATION_ID}}/members/{{USER_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "{{ORGANIZATION_ID}}", "members", "{{USER_ID}}"]
						},
						"description": "Remove a member from the organization with automatic admin promotion if needed."
					}
				},
				{
					"name": "Get Organization Member Stats",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/{{ORGANIZATION_ID}}/members/stats",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "{{ORGANIZATION_ID}}", "members", "stats"]
						},
						"description": "Get organization member statistics including counts by role and status."
					}
				},
				{
					"name": "Delete User Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"delete_organization\": false,\n  \"reason\": \"User requested account deletion\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}"]
						},
						"description": "Delete user account entirely with optional organization deletion if user is the only member."
					}
				}
			],
			"description": "Comprehensive member management system with role-based access control, invitations, and organization administration."
		},
		{
			"name": "üìã Organization Discovery & Invitations",
			"item": [
				{
					"name": "Discover Organization by Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"domain\": \"company.com\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/organization-discovery/discover",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "organization-discovery", "discover"]
						},
						"description": "Discover if an organization exists for a given domain. Used during registration to match users with existing organizations."
					}
				},
				{
					"name": "Get Organization Public Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/organization-discovery/{{ORGANIZATION_ID}}/info",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "organization-discovery", "{{ORGANIZATION_ID}}", "info"]
						},
						"description": "Get public information about an organization (name, domain, etc.) without authentication."
					}
				},
				{
					"name": "Accept Organization Invitation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"New Team Member\",\n  \"password\": \"SecurePassword123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/invitations/accept/INVITATION_TOKEN_HERE",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "invitations", "accept", "INVITATION_TOKEN_HERE"]
						},
						"description": "Accept an organization invitation using the token from the invitation email."
					}
				},
				{
					"name": "Get Invitation Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/invitations/INVITATION_TOKEN_HERE",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "invitations", "INVITATION_TOKEN_HERE"]
						},
						"description": "Get details about an invitation including organization info and role. Used to show invitation details before acceptance."
					}
				}
			],
			"description": "Organization discovery system for automatic user-organization matching and secure invitation workflow."
		},
		{
			"name": "üè• System Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": ["{{BASE_URL}}"],
							"path": ["health"]
						},
						"description": "Comprehensive system health check including database, services, and AI agents status."
					}
				},
				{
					"name": "API Root (System Info)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/",
							"host": ["{{BASE_URL}}"],
							"path": [""]
						},
						"description": "Get comprehensive system information and feature overview with interactive HTML interface."
					}
				},
				{
					"name": "OpenAPI Specification",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/openapi.yaml",
							"host": ["{{BASE_URL}}"],
							"path": ["openapi.yaml"]
						},
						"description": "Download the complete OpenAPI 3.0 specification for the API."
					}
				}
			],
			"description": "System health monitoring and API documentation endpoints."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Authentication Setup Instructions",
					"if (!pm.environment.get('ACCESS_TOKEN') && !pm.environment.get('API_KEY')) {",
					"    console.log('üîê No authentication token found.');",
					"    console.log('üìñ Clerk Authentication Setup Instructions:');",
					"    console.log('1. Open your frontend app and log in with Clerk');",
					"    console.log('2. Open browser console (F12)');",
					"    console.log('3. Run: await window.Clerk.session.getToken()');",
					"    console.log('4. Copy the token and set as CLERK_JWT_TOKEN in Postman');",
					"    console.log('5. Run \"Generate API Key for Testing\" request');",
					"    console.log('6. The API key will be automatically set for all requests');",
					"    console.log('');",
					"    console.log('üîë Alternative: If you have an existing API key, set it as API_KEY variable');",
					"}",
					"",
					"// Use API_KEY if available, otherwise use ACCESS_TOKEN",
					"const apiKey = pm.environment.get('API_KEY');",
					"if (apiKey && !pm.environment.get('ACCESS_TOKEN')) {",
					"    pm.environment.set('ACCESS_TOKEN', apiKey);",
					"    console.log('‚úÖ Using API key for authentication');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time and basic validation",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Handle common error responses",
					"if (pm.response.code === 401) {",
					"    console.log('üîí Authentication required - check ACCESS_TOKEN');",
					"    pm.test('Authentication error handled', function() {",
					"        pm.expect(pm.response.json()).to.have.property('detail');",
					"    });",
					"} else if (pm.response.code === 403) {",
					"    console.log('‚õî Access denied - insufficient permissions');",
					"} else if (pm.response.code === 404) {",
					"    console.log('üîç Resource not found');",
					"} else if (pm.response.code === 422) {",
					"    console.log('üìù Validation error - check request body');",
					"    const response = pm.response.json();",
					"    if (response.detail) {",
					"        console.log('Validation details:', JSON.stringify(response.detail, null, 2));",
					"    }",
					"} else if (pm.response.code >= 500) {",
					"    console.log('üí• Server error - check logs');",
					"}"
				]
			}
		}
	],
	"variable": []
}