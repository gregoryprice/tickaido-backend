"""Add Clerk integration: clerk_id, clerk_organization_id, api_tokens table

Revision ID: 5231d130ac17
Revises: add_file_storage_metadata_tables
Create Date: 2025-09-13 16:08:13.736191

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5231d130ac17'
down_revision = 'add_file_storage_metadata_tables'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_tokens',
    sa.Column('name', sa.String(length=255), nullable=False, comment='User-friendly name for the token'),
    sa.Column('token_hash', sa.String(length=255), nullable=False, comment='Hashed token value (raw token never stored)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who owns this token'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization this token is scoped to'),
    sa.Column('permissions', sa.JSON(), nullable=True, comment='JSON array of permissions for this token'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Token expiration timestamp'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='Last time this token was used'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether token is active and can be used'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('token_hash', name='unique_token_hash'),
    sa.UniqueConstraint('user_id', 'name', name='unique_user_token_name')
    )
    op.create_index(op.f('ix_api_tokens_created_at'), 'api_tokens', ['created_at'], unique=False)
    op.create_index(op.f('ix_api_tokens_deleted_at'), 'api_tokens', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_api_tokens_is_active'), 'api_tokens', ['is_active'], unique=False)
    op.create_index(op.f('ix_api_tokens_is_deleted'), 'api_tokens', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_api_tokens_organization_id'), 'api_tokens', ['organization_id'], unique=False)
    op.create_index(op.f('ix_api_tokens_token_hash'), 'api_tokens', ['token_hash'], unique=True)
    op.create_index(op.f('ix_api_tokens_updated_at'), 'api_tokens', ['updated_at'], unique=False)
    op.create_index(op.f('ix_api_tokens_user_id'), 'api_tokens', ['user_id'], unique=False)
    op.create_unique_constraint(None, 'agent_actions', ['id'])
    op.create_unique_constraint(None, 'agent_files', ['id'])
    op.create_unique_constraint(None, 'agent_history', ['id'])
    op.create_unique_constraint(None, 'agent_tasks', ['id'])
    op.create_unique_constraint(None, 'agent_usage_stats', ['id'])
    # Keep agents.organization_id as nullable for system agents
    # Just update the comment to be clearer
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,  # Keep as nullable for system agents
               comment='Organization this agent belongs to (NULL for system agents)',
               existing_comment='Organization this agent belongs to (NULL for system agents)')
    op.alter_column('agents', 'has_custom_avatar',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_comment='Whether agent has a custom uploaded avatar',
               existing_nullable=False)
    op.create_unique_constraint(None, 'agents', ['id'])
    op.create_unique_constraint(None, 'ai_agent_configs', ['id'])
    op.add_column('avatar_variants', sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'))
    op.alter_column('avatar_variants', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('avatar_variants', 'notes',
               existing_type=sa.TEXT(),
               comment='Internal notes',
               existing_nullable=True)
    op.alter_column('avatar_variants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('avatar_variants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('avatar_variants', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('uq_avatar_variants_storage_key'), 'avatar_variants', type_='unique')
    op.drop_index(op.f('ix_avatar_variants_storage_key'), table_name='avatar_variants')
    op.create_index(op.f('ix_avatar_variants_storage_key'), 'avatar_variants', ['storage_key'], unique=True)
    op.create_index(op.f('ix_avatar_variants_base_file_id'), 'avatar_variants', ['base_file_id'], unique=False)
    op.create_index(op.f('ix_avatar_variants_entity_id'), 'avatar_variants', ['entity_id'], unique=False)
    op.create_index(op.f('ix_avatar_variants_entity_type'), 'avatar_variants', ['entity_type'], unique=False)
    op.create_unique_constraint(None, 'avatar_variants', ['id'])
    op.add_column('file_storage_metadata', sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'))
    op.alter_column('file_storage_metadata', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'notes',
               existing_type=sa.TEXT(),
               comment='Internal notes',
               existing_nullable=True)
    op.alter_column('file_storage_metadata', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('uq_file_storage_metadata_storage_key'), 'file_storage_metadata', type_='unique')
    op.drop_index(op.f('ix_file_storage_metadata_storage_key'), table_name='file_storage_metadata')
    op.create_index(op.f('ix_file_storage_metadata_storage_key'), 'file_storage_metadata', ['storage_key'], unique=True)
    op.create_unique_constraint(None, 'file_storage_metadata', ['id'])
    op.create_unique_constraint(None, 'files', ['id'])
    op.create_unique_constraint(None, 'integrations', ['id'])
    op.create_unique_constraint(None, 'organization_invitations', ['id'])
    op.add_column('organizations', sa.Column('clerk_organization_id', sa.String(length=255), nullable=True, comment='Clerk organization ID for authentication service integration'))
    op.add_column('organizations', sa.Column('clerk_metadata', sa.JSON(), nullable=True, comment='Synced Clerk organization data and metadata'))
    op.create_index(op.f('ix_organizations_clerk_organization_id'), 'organizations', ['clerk_organization_id'], unique=True)
    op.create_unique_constraint(None, 'organizations', ['id'])
    op.create_unique_constraint(None, 'tickets', ['id'])
    op.add_column('users', sa.Column('clerk_id', sa.String(length=255), nullable=True, comment='Clerk user ID for authentication service integration'))
    op.create_index(op.f('ix_users_clerk_id'), 'users', ['clerk_id'], unique=True)
    op.create_unique_constraint(None, 'users', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_index(op.f('ix_users_clerk_id'), table_name='users')
    op.drop_column('users', 'clerk_id')
    op.drop_constraint(None, 'tickets', type_='unique')
    op.drop_constraint(None, 'organizations', type_='unique')
    op.drop_index(op.f('ix_organizations_clerk_organization_id'), table_name='organizations')
    op.drop_column('organizations', 'clerk_metadata')
    op.drop_column('organizations', 'clerk_organization_id')
    op.drop_constraint(None, 'organization_invitations', type_='unique')
    op.drop_constraint(None, 'integrations', type_='unique')
    op.drop_constraint(None, 'files', type_='unique')
    op.drop_constraint(None, 'file_storage_metadata', type_='unique')
    op.drop_index(op.f('ix_file_storage_metadata_storage_key'), table_name='file_storage_metadata')
    op.create_index(op.f('ix_file_storage_metadata_storage_key'), 'file_storage_metadata', ['storage_key'], unique=False)
    op.create_unique_constraint(op.f('uq_file_storage_metadata_storage_key'), 'file_storage_metadata', ['storage_key'], postgresql_nulls_not_distinct=False)
    op.alter_column('file_storage_metadata', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('file_storage_metadata', 'notes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Internal notes',
               existing_nullable=True)
    op.alter_column('file_storage_metadata', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_column('file_storage_metadata', 'extra_metadata')
    op.drop_constraint(None, 'avatar_variants', type_='unique')
    op.drop_index(op.f('ix_avatar_variants_entity_type'), table_name='avatar_variants')
    op.drop_index(op.f('ix_avatar_variants_entity_id'), table_name='avatar_variants')
    op.drop_index(op.f('ix_avatar_variants_base_file_id'), table_name='avatar_variants')
    op.drop_index(op.f('ix_avatar_variants_storage_key'), table_name='avatar_variants')
    op.create_index(op.f('ix_avatar_variants_storage_key'), 'avatar_variants', ['storage_key'], unique=False)
    op.create_unique_constraint(op.f('uq_avatar_variants_storage_key'), 'avatar_variants', ['storage_key'], postgresql_nulls_not_distinct=False)
    op.alter_column('avatar_variants', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('avatar_variants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('avatar_variants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('avatar_variants', 'notes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Internal notes',
               existing_nullable=True)
    op.alter_column('avatar_variants', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_column('avatar_variants', 'extra_metadata')
    op.drop_constraint(None, 'ai_agent_configs', type_='unique')
    op.drop_constraint(None, 'agents', type_='unique')
    op.alter_column('agents', 'has_custom_avatar',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_comment='Whether agent has a custom uploaded avatar',
               existing_nullable=False)
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Organization this agent belongs to (NULL for system agents)',
               existing_comment='Organization this agent belongs to')
    op.drop_constraint(None, 'agent_usage_stats', type_='unique')
    op.drop_constraint(None, 'agent_tasks', type_='unique')
    op.drop_constraint(None, 'agent_history', type_='unique')
    op.drop_constraint(None, 'agent_files', type_='unique')
    op.drop_constraint(None, 'agent_actions', type_='unique')
    op.drop_index(op.f('ix_api_tokens_user_id'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_updated_at'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_token_hash'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_organization_id'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_is_deleted'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_is_active'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_deleted_at'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_created_at'), table_name='api_tokens')
    op.drop_table('api_tokens')
    # ### end Alembic commands ###