"""initial_fresh_schema

Revision ID: dba8a43efbc8
Revises: 
Create Date: 2025-09-09 21:05:02.054561

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'dba8a43efbc8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Company/organization name'),
    sa.Column('domain', sa.String(length=255), nullable=True, comment='Primary domain for the organization (e.g., company.com)'),
    sa.Column('display_name', sa.String(length=255), nullable=True, comment='Display name for UI (defaults to name if not set)'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether organization is enabled for use'),
    sa.Column('settings', sa.JSON(), nullable=True, comment='Organization-specific settings and preferences'),
    sa.Column('contact_email', sa.String(length=255), nullable=True, comment='Primary contact email for the organization'),
    sa.Column('contact_phone', sa.String(length=50), nullable=True, comment='Primary contact phone number'),
    sa.Column('address', sa.Text(), nullable=True, comment='Organization address'),
    sa.Column('city', sa.String(length=100), nullable=True, comment='City'),
    sa.Column('state_province', sa.String(length=100), nullable=True, comment='State or province'),
    sa.Column('postal_code', sa.String(length=20), nullable=True, comment='Postal/ZIP code'),
    sa.Column('country', sa.String(length=100), nullable=True, comment='Country'),
    sa.Column('industry', sa.String(length=100), nullable=True, comment='Industry or business sector'),
    sa.Column('size', sa.String(length=50), nullable=True, comment='Organization size (small, medium, large, enterprise)'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment='Default timezone for the organization'),
    sa.Column('plan', sa.String(length=50), nullable=False, comment='Subscription plan (basic, professional, enterprise)'),
    sa.Column('billing_email', sa.String(length=255), nullable=True, comment='Billing contact email'),
    sa.Column('feature_flags', sa.JSON(), nullable=True, comment='Enabled features for this organization'),
    sa.Column('limits', sa.JSON(), nullable=True, comment='Usage limits and quotas'),
    sa.Column('logo_url', sa.String(length=500), nullable=True, comment='Organization logo URL'),
    sa.Column('brand_colors', sa.JSON(), nullable=True, comment='Brand colors for UI customization'),
    sa.Column('custom_domain', sa.String(length=255), nullable=True, comment='Custom domain for white-labeling'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_organizations_created_at'), 'organizations', ['created_at'], unique=False)
    op.create_index(op.f('ix_organizations_custom_domain'), 'organizations', ['custom_domain'], unique=True)
    op.create_index(op.f('ix_organizations_deleted_at'), 'organizations', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_organizations_domain'), 'organizations', ['domain'], unique=True)
    op.create_index(op.f('ix_organizations_is_deleted'), 'organizations', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_organizations_is_enabled'), 'organizations', ['is_enabled'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_index(op.f('ix_organizations_updated_at'), 'organizations', ['updated_at'], unique=False)
    op.create_table('agents',
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization this agent belongs to'),
    sa.Column('agent_type', sa.String(length=50), nullable=False, comment='Type of agent (customer_support, categorization, etc.)'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the agent'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='URL for agent avatar image'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether agent is active and ready to handle requests'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Current agent status (active, inactive, error, maintenance)'),
    sa.Column('role', sa.String(length=255), nullable=True, comment='Agent role and responsibility description'),
    sa.Column('prompt', sa.Text(), nullable=True, comment='System prompt for Pydantic AI agent initialization'),
    sa.Column('initial_context', sa.Text(), nullable=True, comment='Initial context provided to agent conversations'),
    sa.Column('initial_ai_msg', sa.Text(), nullable=True, comment='Initial AI message for conversation start'),
    sa.Column('tone', sa.String(length=100), nullable=True, comment='Communication tone (formal, casual, professional, etc.)'),
    sa.Column('communication_style', sa.String(length=100), nullable=False, comment='Communication style preference'),
    sa.Column('use_streaming', sa.Boolean(), nullable=False, comment='Whether to use streaming responses'),
    sa.Column('response_length', sa.String(length=20), nullable=False, comment='Preferred response length (brief, moderate, detailed)'),
    sa.Column('memory_retention', sa.Integer(), nullable=False, comment='Number of previous messages to retain in memory'),
    sa.Column('show_suggestions_after_each_message', sa.Boolean(), nullable=False, comment='Whether to show suggested responses'),
    sa.Column('suggestions_prompt', sa.Text(), nullable=True, comment='Custom prompt for generating suggestions'),
    sa.Column('max_context_size', sa.Integer(), nullable=False, comment='Maximum context window size in tokens'),
    sa.Column('use_memory_context', sa.Boolean(), nullable=False, comment='Whether to use conversation memory in context'),
    sa.Column('max_iterations', sa.Integer(), nullable=False, comment='Maximum number of tool call iterations'),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True, comment='Timeout for agent responses in seconds'),
    sa.Column('tools', sa.JSON(), nullable=False, comment='List of enabled tool names'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='When agent was last used to process a message'),
    sa.Column('extra_metadata', sa.JSON(), nullable=True, comment='Additional metadata and custom fields'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Multi-agent system for organization-scoped automation and support'
    )
    op.create_index(op.f('ix_agents_agent_type'), 'agents', ['agent_type'], unique=False)
    op.create_index(op.f('ix_agents_created_at'), 'agents', ['created_at'], unique=False)
    op.create_index(op.f('ix_agents_deleted_at'), 'agents', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agents_is_active'), 'agents', ['is_active'], unique=False)
    op.create_index(op.f('ix_agents_is_deleted'), 'agents', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agents_organization_id'), 'agents', ['organization_id'], unique=False)
    op.create_index(op.f('ix_agents_status'), 'agents', ['status'], unique=False)
    op.create_index(op.f('ix_agents_updated_at'), 'agents', ['updated_at'], unique=False)
    op.create_table('integrations',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name for the integration'),
    sa.Column('integration_category', sa.Enum('ticketing', 'crm', 'messaging', 'communication', 'project_management', 'code_repository', 'webhook', name='integrationcategory'), nullable=False, comment='Functional category of the integration'),
    sa.Column('platform_name', sa.String(length=50), nullable=False, comment='Name of the integration platform (jira, slack, etc.)'),
    sa.Column('status', sa.Enum('active', 'inactive', 'pending', 'error', 'expired', 'suspended', name='integrationstatus'), nullable=False, comment='Current integration status'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Whether the integration is enabled for use'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of integration purpose'),
    sa.Column('base_url', sa.String(length=500), nullable=True, comment='Base URL for API endpoints'),
    sa.Column('api_version', sa.String(length=20), nullable=True, comment='API version being used'),
    sa.Column('auth_type', sa.String(length=50), nullable=False, comment='Authentication type (api_key, oauth2, basic, bearer)'),
    sa.Column('credentials_encrypted', sa.Text(), nullable=True, comment='Encrypted authentication credentials (base64 encoded)'),
    sa.Column('oauth_scopes', sa.JSON(), nullable=True, comment='OAuth scopes if using OAuth authentication'),
    sa.Column('last_health_check_at', sa.DateTime(timezone=True), nullable=True, comment='Last health check timestamp'),
    sa.Column('health_check_status', sa.String(length=20), nullable=True, comment='Last health check result (healthy, unhealthy, unknown)'),
    sa.Column('health_check_error', sa.Text(), nullable=True, comment='Error message from last health check'),
    sa.Column('connection_test_count', sa.Integer(), nullable=False, comment='Number of connection tests performed'),
    sa.Column('total_requests', sa.Integer(), nullable=False, comment='Total API requests made'),
    sa.Column('successful_requests', sa.Integer(), nullable=False, comment='Number of successful requests'),
    sa.Column('failed_requests', sa.Integer(), nullable=False, comment='Number of failed requests'),
    sa.Column('last_request_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last API request'),
    sa.Column('last_success_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last successful request'),
    sa.Column('last_error_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last error'),
    sa.Column('last_error_message', sa.Text(), nullable=True, comment='Last error message'),
    sa.Column('rate_limit_per_hour', sa.Integer(), nullable=True, comment='Rate limit requests per hour'),
    sa.Column('current_hour_requests', sa.Integer(), nullable=False, comment='Requests made in current hour'),
    sa.Column('rate_limit_reset_at', sa.DateTime(timezone=True), nullable=True, comment='When rate limit counter resets'),
    sa.Column('routing_rules', sa.JSON(), nullable=True, comment='Rules for when to use this integration'),
    sa.Column('default_priority', sa.Integer(), nullable=False, comment='Priority for routing (lower = higher priority)'),
    sa.Column('supports_categories', sa.JSON(), nullable=True, comment='List of ticket categories this integration supports'),
    sa.Column('supports_priorities', sa.JSON(), nullable=True, comment='List of ticket priorities this integration supports'),
    sa.Column('department_mapping', sa.JSON(), nullable=True, comment='Mapping of internal departments to integration teams/queues'),
    sa.Column('custom_fields_mapping', sa.JSON(), nullable=True, comment='Mapping of internal fields to integration fields'),
    sa.Column('webhook_url', sa.String(length=500), nullable=True, comment='Webhook URL for receiving events'),
    sa.Column('webhook_secret_encrypted', sa.Text(), nullable=True, comment='Encrypted webhook authentication secret'),
    sa.Column('sync_enabled', sa.Boolean(), nullable=False, comment='Whether to sync data bidirectionally'),
    sa.Column('sync_frequency_minutes', sa.Integer(), nullable=False, comment='Sync frequency in minutes'),
    sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True, comment='Last successful sync timestamp'),
    sa.Column('notification_events', sa.JSON(), nullable=True, comment='Events that should trigger notifications'),
    sa.Column('notification_channels', sa.JSON(), nullable=True, comment='Channels for sending notifications'),
    sa.Column('environment', sa.String(length=50), nullable=False, comment='Environment (production, staging, development)'),
    sa.Column('region', sa.String(length=50), nullable=True, comment='Service region if applicable'),
    sa.Column('monitoring_enabled', sa.Boolean(), nullable=False, comment='Whether to monitor this integration'),
    sa.Column('alert_on_failure', sa.Boolean(), nullable=False, comment='Whether to send alerts on failures'),
    sa.Column('failure_threshold', sa.Integer(), nullable=False, comment='Number of failures before alerting'),
    sa.Column('consecutive_failures', sa.Integer(), nullable=False, comment='Current consecutive failure count'),
    sa.Column('maintenance_window_start', sa.String(length=10), nullable=True, comment='Maintenance window start time (HH:MM UTC)'),
    sa.Column('maintenance_window_end', sa.String(length=10), nullable=True, comment='Maintenance window end time (HH:MM UTC)'),
    sa.Column('auto_disable_on_error', sa.Boolean(), nullable=False, comment='Whether to auto-disable on repeated errors'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When integration credentials expire'),
    sa.Column('last_activation_at', sa.DateTime(timezone=True), nullable=True, comment='When integration was last activated'),
    sa.Column('activation_method', sa.String(length=20), nullable=True, comment='How integration was activated (manual, automatic)'),
    sa.Column('organization_id', sa.UUID(), nullable=True, comment='Organization/company this integration belongs to'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_integrations_created_at'), 'integrations', ['created_at'], unique=False)
    op.create_index(op.f('ix_integrations_deleted_at'), 'integrations', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_integrations_enabled'), 'integrations', ['enabled'], unique=False)
    op.create_index(op.f('ix_integrations_integration_category'), 'integrations', ['integration_category'], unique=False)
    op.create_index(op.f('ix_integrations_is_deleted'), 'integrations', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_integrations_organization_id'), 'integrations', ['organization_id'], unique=False)
    op.create_index(op.f('ix_integrations_platform_name'), 'integrations', ['platform_name'], unique=False)
    op.create_index(op.f('ix_integrations_status'), 'integrations', ['status'], unique=False)
    op.create_index(op.f('ix_integrations_updated_at'), 'integrations', ['updated_at'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
    sa.Column('full_name', sa.String(length=255), nullable=True, comment="User's full name"),
    sa.Column('password_hash', sa.String(length=255), nullable=True, comment='Hashed password (null for external auth)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether user account is active'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether email is verified'),
    sa.Column('is_admin', sa.Boolean(), nullable=False, comment='Admin privileges'),
    sa.Column('role', sa.Enum('ADMIN', 'MANAGER', 'AGENT', 'USER', 'API_USER', name='userrole'), nullable=False, comment='User role'),
    sa.Column('permissions', sa.JSON(), nullable=True, comment='JSON array of specific permissions'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='Last login timestamp'),
    sa.Column('login_count', sa.String(length=50), nullable=False, comment='Total number of logins'),
    sa.Column('failed_login_attempts', sa.String(length=50), nullable=False, comment='Failed login attempts counter'),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True, comment='Account locked until timestamp'),
    sa.Column('external_auth_provider', sa.String(length=50), nullable=True, comment='External auth provider (google, microsoft, etc.)'),
    sa.Column('external_auth_id', sa.String(length=255), nullable=True, comment='External authentication ID'),
    sa.Column('preferences', sa.JSON(), nullable=True, comment='User preferences as JSON'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment="User's timezone"),
    sa.Column('language', sa.String(length=10), nullable=False, comment='Preferred language code'),
    sa.Column('api_key_hash', sa.String(length=255), nullable=True, comment='Hashed API key for programmatic access'),
    sa.Column('api_key_created_at', sa.DateTime(timezone=True), nullable=True, comment='API key creation timestamp'),
    sa.Column('api_key_last_used_at', sa.DateTime(timezone=True), nullable=True, comment='API key last used timestamp'),
    sa.Column('rate_limit_override', sa.String(length=50), nullable=True, comment='Custom rate limit for this user'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='Profile picture URL'),
    sa.Column('department', sa.String(length=100), nullable=True, comment="User's department or team"),
    sa.Column('organization_id', sa.UUID(), nullable=True, comment='Organization/company this user belongs to'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_users_api_key_hash'), 'users', ['api_key_hash'], unique=True)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_external_auth_id'), 'users', ['external_auth_id'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_admin'), 'users', ['is_admin'], unique=False)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_organization_id'), 'users', ['organization_id'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_table('agent_actions',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent that performed the action'),
    sa.Column('action_type', sa.String(length=50), nullable=False, comment='Type of action (chat_response, ticket_creation, tool_call, etc.)'),
    sa.Column('action_subtype', sa.String(length=50), nullable=True, comment='Subtype for more specific action categorization'),
    sa.Column('action_data', sa.JSON(), nullable=False, comment='Input data and parameters for the action'),
    sa.Column('action_context', sa.JSON(), nullable=True, comment='Context information (conversation ID, user info, etc.)'),
    sa.Column('result_data', sa.JSON(), nullable=True, comment='Action results and outputs'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='Whether the action completed successfully'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if action failed'),
    sa.Column('execution_time_ms', sa.Integer(), nullable=False, comment='Execution time in milliseconds'),
    sa.Column('tokens_used', sa.Integer(), nullable=True, comment='Number of AI model tokens consumed'),
    sa.Column('cost_cents', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='Estimated cost in cents for the action'),
    sa.Column('confidence_score', sa.DECIMAL(precision=5, scale=4), nullable=True, comment='Agent confidence in the action result (0.0 to 1.0)'),
    sa.Column('quality_score', sa.DECIMAL(precision=5, scale=4), nullable=True, comment='Quality assessment score (0.0 to 1.0)'),
    sa.Column('user_feedback_score', sa.Integer(), nullable=True, comment='User feedback score (1-5 stars) if available'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, comment='When the action started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=False, comment='When the action completed'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who triggered the action (if applicable)'),
    sa.Column('session_id', sa.String(length=255), nullable=True, comment='Session ID for grouping related actions'),
    sa.Column('conversation_id', sa.String(length=255), nullable=True, comment='Conversation ID for chat-related actions'),
    sa.Column('source_channel', sa.String(length=50), nullable=True, comment='Channel that triggered the action (api, slack, email, etc.)'),
    sa.Column('source_reference', sa.String(length=255), nullable=True, comment='External reference ID'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the request (if applicable)'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent string (if from web request)'),
    sa.Column('tools_used', sa.JSON(), nullable=True, comment='List of tools/integrations used in the action'),
    sa.Column('integration_calls', sa.JSON(), nullable=True, comment='External API calls made during action'),
    sa.Column('input_length', sa.Integer(), nullable=True, comment='Length of input content in characters'),
    sa.Column('output_length', sa.Integer(), nullable=True, comment='Length of output content in characters'),
    sa.Column('media_processed', sa.JSON(), nullable=True, comment='Information about processed media files'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)', name='ck_agent_action_confidence_score'),
    sa.CheckConstraint('quality_score IS NULL OR (quality_score >= 0.0 AND quality_score <= 1.0)', name='ck_agent_action_quality_score'),
    sa.CheckConstraint('user_feedback_score IS NULL OR (user_feedback_score >= 1 AND user_feedback_score <= 5)', name='ck_agent_action_user_feedback'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent action tracking with performance metrics and analytics'
    )
    op.create_index(op.f('ix_agent_actions_action_type'), 'agent_actions', ['action_type'], unique=False)
    op.create_index(op.f('ix_agent_actions_agent_id'), 'agent_actions', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_conversation_id'), 'agent_actions', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_created_at'), 'agent_actions', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_deleted_at'), 'agent_actions', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_is_deleted'), 'agent_actions', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_actions_session_id'), 'agent_actions', ['session_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_started_at'), 'agent_actions', ['started_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_success'), 'agent_actions', ['success'], unique=False)
    op.create_index(op.f('ix_agent_actions_updated_at'), 'agent_actions', ['updated_at'], unique=False)
    op.create_table('agent_history',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this history entry belongs to'),
    sa.Column('changed_by_user_id', sa.UUID(), nullable=False, comment='User who made the change'),
    sa.Column('change_type', sa.String(length=50), nullable=False, comment='Type of change (configuration_update, status_change, activation, etc.)'),
    sa.Column('field_changed', sa.String(length=100), nullable=False, comment='Field that was changed (prompt, role, is_active, etc.)'),
    sa.Column('old_value', sa.Text(), nullable=True, comment='Previous value (JSON for complex fields)'),
    sa.Column('new_value', sa.Text(), nullable=True, comment='New value (JSON for complex fields)'),
    sa.Column('change_timestamp', sa.DateTime(timezone=True), nullable=False, comment='When the change occurred'),
    sa.Column('change_reason', sa.Text(), nullable=True, comment='Optional reason for the change'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the request that made the change'),
    sa.Column('request_metadata', sa.Text(), nullable=True, comment='Additional request metadata (user agent, etc.)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['changed_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_agent_history_agent_id'), 'agent_history', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_history_change_timestamp'), 'agent_history', ['change_timestamp'], unique=False)
    op.create_index(op.f('ix_agent_history_change_type'), 'agent_history', ['change_type'], unique=False)
    op.create_index(op.f('ix_agent_history_changed_by_user_id'), 'agent_history', ['changed_by_user_id'], unique=False)
    op.create_index(op.f('ix_agent_history_created_at'), 'agent_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_history_deleted_at'), 'agent_history', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_history_field_changed'), 'agent_history', ['field_changed'], unique=False)
    op.create_index(op.f('ix_agent_history_is_deleted'), 'agent_history', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_history_updated_at'), 'agent_history', ['updated_at'], unique=False)
    op.create_table('agent_tasks',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent assigned to process this task'),
    sa.Column('task_type', sa.String(length=50), nullable=False, comment='Type of task (slack_message, email, api_request, health_check, etc.)'),
    sa.Column('task_subtype', sa.String(length=50), nullable=True, comment='Subtype for more granular task categorization'),
    sa.Column('task_data', sa.JSON(), nullable=False, comment='Task input data and parameters'),
    sa.Column('task_metadata', sa.JSON(), nullable=True, comment='Additional metadata about the task source and context'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Task status (pending, assigned, processing, completed, failed, cancelled)'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Task priority (1=highest, 10=lowest)'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False, comment='When the task should be processed'),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=True, comment='When task was assigned to an agent'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='When task processing started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When task was completed'),
    sa.Column('celery_task_id', sa.String(length=255), nullable=True, comment='Celery task ID for tracking background processing'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts made'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum number of retry attempts allowed'),
    sa.Column('last_error', sa.Text(), nullable=True, comment='Last error message if task failed'),
    sa.Column('error_history', sa.JSON(), nullable=True, comment='History of all error attempts'),
    sa.Column('result_data', sa.JSON(), nullable=True, comment='Task processing results and output'),
    sa.Column('result_metadata', sa.JSON(), nullable=True, comment='Metadata about task processing (duration, resources used, etc.)'),
    sa.Column('parent_task_id', sa.UUID(), nullable=True, comment='Parent task if this is a subtask'),
    sa.Column('correlation_id', sa.String(length=255), nullable=True, comment='Correlation ID for grouping related tasks'),
    sa.Column('estimated_duration_seconds', sa.Integer(), nullable=True, comment='Estimated processing duration in seconds'),
    sa.Column('actual_duration_seconds', sa.Integer(), nullable=True, comment='Actual processing duration in seconds'),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True, comment='User who created the task (if applicable)'),
    sa.Column('source_channel', sa.String(length=50), nullable=True, comment='Channel that generated the task (slack, email, api, etc.)'),
    sa.Column('source_reference', sa.String(length=255), nullable=True, comment='External reference ID (slack message ID, email ID, etc.)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'assigned', 'processing', 'completed', 'failed', 'cancelled')", name='ck_agent_task_status'),
    sa.CheckConstraint('priority >= 1 AND priority <= 10', name='ck_agent_task_priority'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent_task_id'], ['agent_tasks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent task queue with autonomous processing and retry logic'
    )
    op.create_index(op.f('ix_agent_tasks_agent_id'), 'agent_tasks', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_celery_task_id'), 'agent_tasks', ['celery_task_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_correlation_id'), 'agent_tasks', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_created_at'), 'agent_tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_deleted_at'), 'agent_tasks', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_is_deleted'), 'agent_tasks', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_tasks_priority'), 'agent_tasks', ['priority'], unique=False)
    op.create_index(op.f('ix_agent_tasks_scheduled_at'), 'agent_tasks', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_status'), 'agent_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_agent_tasks_task_type'), 'agent_tasks', ['task_type'], unique=False)
    op.create_index(op.f('ix_agent_tasks_updated_at'), 'agent_tasks', ['updated_at'], unique=False)
    op.create_table('agent_usage_stats',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent these stats belong to'),
    sa.Column('total_messages', sa.Integer(), nullable=False, comment='Total messages processed by agent'),
    sa.Column('successful_responses', sa.Integer(), nullable=False, comment='Number of successful responses'),
    sa.Column('failed_responses', sa.Integer(), nullable=False, comment='Number of failed responses'),
    sa.Column('tools_called', sa.Integer(), nullable=False, comment='Total number of MCP tool calls made'),
    sa.Column('avg_response_time_ms', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Average response time in milliseconds'),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False, comment='Start of statistics period'),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False, comment='End of statistics period'),
    sa.Column('unique_users', sa.Integer(), nullable=True, comment='Number of unique users who interacted with agent'),
    sa.Column('confidence_scores', sa.JSON(), nullable=True, comment='Array of confidence scores for responses'),
    sa.Column('tool_usage', sa.JSON(), nullable=True, comment='Breakdown of tool usage by tool name'),
    sa.Column('error_types', sa.JSON(), nullable=True, comment='Breakdown of error types encountered'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_agent_usage_stats_agent_id'), 'agent_usage_stats', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_created_at'), 'agent_usage_stats', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_deleted_at'), 'agent_usage_stats', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_is_deleted'), 'agent_usage_stats', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_period_end'), 'agent_usage_stats', ['period_end'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_period_start'), 'agent_usage_stats', ['period_start'], unique=False)
    op.create_index(op.f('ix_agent_usage_stats_updated_at'), 'agent_usage_stats', ['updated_at'], unique=False)
    op.create_table('ai_agent_configs',
    sa.Column('agent_type', sa.Enum('CUSTOMER_SUPPORT', 'CATEGORIZATION', 'FILE_ANALYSIS', 'TITLE_GENERATION', 'SENTIMENT_ANALYSIS', 'ROUTING', 'ESCALATION', 'SUMMARY', 'TRANSLATION', name='aiagenttype'), nullable=False, comment='Type of AI agent this configuration applies to'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for this configuration'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='Configuration version (semantic versioning)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of configuration purpose and changes'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this configuration is currently active'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='Whether this is the default configuration'),
    sa.Column('environment', sa.String(length=50), nullable=False, comment='Environment this configuration applies to'),
    sa.Column('model_provider', sa.String(length=50), nullable=False, comment='AI provider (openai, anthropic, google, azure)'),
    sa.Column('model_name', sa.String(length=100), nullable=False, comment='Specific model name/version'),
    sa.Column('model_parameters', sa.JSON(), nullable=True, comment='Model-specific parameters (temperature, max_tokens, etc.)'),
    sa.Column('system_prompt', sa.Text(), nullable=True, comment='System prompt template for the agent'),
    sa.Column('prompt_template', sa.Text(), nullable=True, comment='User message prompt template'),
    sa.Column('prompt_variables', sa.JSON(), nullable=True, comment='Variables used in prompt templates'),
    sa.Column('few_shot_examples', sa.JSON(), nullable=True, comment='Few-shot learning examples for the agent'),
    sa.Column('output_schema', sa.JSON(), nullable=True, comment='Expected output schema/format'),
    sa.Column('validation_rules', sa.JSON(), nullable=True, comment='Rules for validating agent output'),
    sa.Column('post_processing_rules', sa.JSON(), nullable=True, comment='Rules for post-processing agent responses'),
    sa.Column('temperature', sa.String(length=10), nullable=False, comment='Model temperature for response variability'),
    sa.Column('max_tokens', sa.Integer(), nullable=True, comment='Maximum tokens in response'),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False, comment='Request timeout in seconds'),
    sa.Column('retry_attempts', sa.Integer(), nullable=False, comment='Number of retry attempts on failure'),
    sa.Column('confidence_threshold', sa.String(length=10), nullable=False, comment='Minimum confidence threshold for responses'),
    sa.Column('content_filters', sa.JSON(), nullable=True, comment='Content filtering rules and thresholds'),
    sa.Column('safety_settings', sa.JSON(), nullable=True, comment='Safety configuration for the agent'),
    sa.Column('cost_per_request_usd', sa.String(length=20), nullable=True, comment='Estimated cost per request in USD'),
    sa.Column('daily_budget_usd', sa.String(length=20), nullable=True, comment='Daily budget limit in USD'),
    sa.Column('monthly_budget_usd', sa.String(length=20), nullable=True, comment='Monthly budget limit in USD'),
    sa.Column('total_requests', sa.Integer(), nullable=False, comment='Total requests made with this configuration'),
    sa.Column('successful_requests', sa.Integer(), nullable=False, comment='Number of successful requests'),
    sa.Column('failed_requests', sa.Integer(), nullable=False, comment='Number of failed requests'),
    sa.Column('average_response_time_ms', sa.Integer(), nullable=True, comment='Average response time in milliseconds'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='Last time this configuration was used'),
    sa.Column('ab_test_group', sa.String(length=50), nullable=True, comment='A/B test group identifier'),
    sa.Column('ab_test_percentage', sa.Integer(), nullable=True, comment='Percentage of traffic for A/B testing'),
    sa.Column('ab_test_start_date', sa.DateTime(timezone=True), nullable=True, comment='A/B test start date'),
    sa.Column('ab_test_end_date', sa.DateTime(timezone=True), nullable=True, comment='A/B test end date'),
    sa.Column('parent_config_id', sa.UUID(), nullable=True, comment='Parent configuration for inheritance'),
    sa.Column('inheritance_rules', sa.JSON(), nullable=True, comment='Rules for inheriting from parent configuration'),
    sa.Column('monitoring_enabled', sa.Boolean(), nullable=False, comment='Whether to monitor this configuration'),
    sa.Column('alert_thresholds', sa.JSON(), nullable=True, comment='Thresholds for triggering alerts'),
    sa.Column('performance_metrics', sa.JSON(), nullable=True, comment='Performance metrics and benchmarks'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='User who created this configuration'),
    sa.Column('approved_by_id', sa.UUID(), nullable=True, comment='User who approved this configuration'),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True, comment='When configuration was approved'),
    sa.Column('deprecated_at', sa.DateTime(timezone=True), nullable=True, comment='When configuration was deprecated'),
    sa.Column('deprecation_reason', sa.Text(), nullable=True, comment='Reason for deprecating this configuration'),
    sa.Column('change_log', sa.JSON(), nullable=True, comment='Log of changes made to this configuration'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Tags for organizing and searching configurations'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent_config_id'], ['ai_agent_configs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_ai_agent_configs_agent_type'), 'ai_agent_configs', ['agent_type'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_created_at'), 'ai_agent_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_deleted_at'), 'ai_agent_configs', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_environment'), 'ai_agent_configs', ['environment'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_is_active'), 'ai_agent_configs', ['is_active'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_is_deleted'), 'ai_agent_configs', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_ai_agent_configs_updated_at'), 'ai_agent_configs', ['updated_at'], unique=False)
    op.create_table('threads',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('total_messages', sa.Integer(), nullable=False),
    sa.Column('last_message_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('archived', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_threads_agent_org', 'threads', ['agent_id', 'organization_id'], unique=False)
    op.create_index('idx_threads_created_at', 'threads', ['created_at'], unique=False)
    op.create_index('idx_threads_updated_at', 'threads', ['updated_at'], unique=False)
    op.create_index('idx_threads_user_archived', 'threads', ['user_id', 'archived'], unique=False)
    op.create_index(op.f('ix_threads_deleted_at'), 'threads', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_threads_is_deleted'), 'threads', ['is_deleted'], unique=False)
    op.create_table('tickets',
    sa.Column('title', sa.String(length=500), nullable=False, comment='Ticket title/subject'),
    sa.Column('description', sa.Text(), nullable=False, comment='Detailed ticket description'),
    sa.Column('status', sa.Enum('new', 'open', 'in_progress', 'pending', 'resolved', 'closed', 'cancelled', name='ticketstatus'), nullable=False, comment='Current ticket status'),
    sa.Column('priority', sa.Enum('low', 'medium', 'high', 'critical', name='ticketpriority'), nullable=False, comment='Ticket priority level'),
    sa.Column('category', sa.Enum('technical', 'billing', 'feature_request', 'bug', 'user_access', 'general', 'integration', 'performance', 'security', name='ticketcategory'), nullable=False, comment='Issue category'),
    sa.Column('subcategory', sa.String(length=100), nullable=True, comment='Specific subcategory within main category'),
    sa.Column('created_by_id', sa.UUID(), nullable=False, comment='User who created the ticket'),
    sa.Column('assigned_to_id', sa.UUID(), nullable=True, comment='User assigned to handle the ticket'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization to which the ticket belongs'),
    sa.Column('integration_id', sa.UUID(), nullable=True, comment='Integration platform for routing (jira, servicenow, etc.)'),
    sa.Column('department', sa.String(length=100), nullable=True, comment='Department responsible for ticket'),
    sa.Column('external_ticket_id', sa.String(length=255), nullable=True, comment='External ticket ID in integration system'),
    sa.Column('external_ticket_url', sa.String(length=500), nullable=True, comment='URL to external ticket'),
    sa.Column('ai_confidence_score', sa.String(length=10), nullable=True, comment='AI confidence score for categorization (0-1)'),
    sa.Column('ai_reasoning', sa.Text(), nullable=True, comment='AI explanation for categorization decisions'),
    sa.Column('ai_tags', sa.JSON(), nullable=True, comment='AI-generated tags for the ticket'),
    sa.Column('ai_keywords', sa.JSON(), nullable=True, comment='Key terms detected by AI'),
    sa.Column('ai_similar_patterns', sa.JSON(), nullable=True, comment='Similar issue patterns identified by AI'),
    sa.Column('urgency', sa.Enum('low', 'medium', 'high', 'critical', name='ticketpriority'), nullable=False, comment='Urgency level for resolution'),
    sa.Column('business_impact', sa.String(length=50), nullable=False, comment='Assessed business impact level'),
    sa.Column('customer_segment', sa.String(length=100), nullable=True, comment='Affected customer segment'),
    sa.Column('estimated_effort', sa.String(length=50), nullable=True, comment='Estimated effort level (minimal, moderate, significant, major)'),
    sa.Column('estimated_resolution_time', sa.String(length=100), nullable=True, comment='Estimated time to resolve'),
    sa.Column('resolution_summary', sa.Text(), nullable=True, comment='Summary of how the ticket was resolved'),
    sa.Column('resolution_time_minutes', sa.Integer(), nullable=True, comment='Actual resolution time in minutes'),
    sa.Column('first_response_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of first response'),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when ticket was resolved'),
    sa.Column('closed_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when ticket was closed'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=False, comment='Last activity timestamp'),
    sa.Column('communication_count', sa.Integer(), nullable=False, comment='Number of communications on this ticket'),
    sa.Column('satisfaction_rating', sa.Integer(), nullable=True, comment='Customer satisfaction rating (1-5)'),
    sa.Column('satisfaction_feedback', sa.Text(), nullable=True, comment='Customer feedback on resolution'),
    sa.Column('escalation_level', sa.Integer(), nullable=False, comment='Current escalation level'),
    sa.Column('escalated_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when ticket was escalated'),
    sa.Column('escalated_by_id', sa.UUID(), nullable=True, comment='User who escalated the ticket'),
    sa.Column('escalation_reason', sa.Text(), nullable=True, comment='Reason for escalation'),
    sa.Column('source_channel', sa.String(length=50), nullable=False, comment='Channel where ticket was created (web, email, phone, chat)'),
    sa.Column('source_details', sa.JSON(), nullable=True, comment='Additional source-specific details'),
    sa.Column('custom_fields', sa.JSON(), nullable=True, comment='Custom fields for organization-specific data'),
    sa.Column('internal_notes', sa.Text(), nullable=True, comment='Internal notes not visible to customer'),
    sa.Column('sla_due_date', sa.DateTime(timezone=True), nullable=True, comment='SLA due date for resolution'),
    sa.Column('sla_breached', sa.Boolean(), nullable=False, comment='Whether SLA has been breached'),
    sa.Column('related_kb_articles', sa.JSON(), nullable=True, comment='Related knowledge base articles'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['escalated_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_tickets_assigned_to_id'), 'tickets', ['assigned_to_id'], unique=False)
    op.create_index(op.f('ix_tickets_category'), 'tickets', ['category'], unique=False)
    op.create_index(op.f('ix_tickets_closed_at'), 'tickets', ['closed_at'], unique=False)
    op.create_index(op.f('ix_tickets_created_at'), 'tickets', ['created_at'], unique=False)
    op.create_index(op.f('ix_tickets_created_by_id'), 'tickets', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_tickets_deleted_at'), 'tickets', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_tickets_department'), 'tickets', ['department'], unique=False)
    op.create_index(op.f('ix_tickets_external_ticket_id'), 'tickets', ['external_ticket_id'], unique=False)
    op.create_index(op.f('ix_tickets_first_response_at'), 'tickets', ['first_response_at'], unique=False)
    op.create_index(op.f('ix_tickets_integration_id'), 'tickets', ['integration_id'], unique=False)
    op.create_index(op.f('ix_tickets_is_deleted'), 'tickets', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tickets_last_activity_at'), 'tickets', ['last_activity_at'], unique=False)
    op.create_index(op.f('ix_tickets_organization_id'), 'tickets', ['organization_id'], unique=False)
    op.create_index(op.f('ix_tickets_priority'), 'tickets', ['priority'], unique=False)
    op.create_index(op.f('ix_tickets_resolved_at'), 'tickets', ['resolved_at'], unique=False)
    op.create_index(op.f('ix_tickets_sla_due_date'), 'tickets', ['sla_due_date'], unique=False)
    op.create_index(op.f('ix_tickets_status'), 'tickets', ['status'], unique=False)
    op.create_index(op.f('ix_tickets_title'), 'tickets', ['title'], unique=False)
    op.create_index(op.f('ix_tickets_updated_at'), 'tickets', ['updated_at'], unique=False)
    op.create_table('files',
    sa.Column('filename', sa.String(length=255), nullable=False, comment='Original filename'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='Server file path'),
    sa.Column('mime_type', sa.String(length=100), nullable=False, comment='MIME type of the file'),
    sa.Column('file_size', sa.BigInteger(), nullable=False, comment='File size in bytes'),
    sa.Column('file_hash', sa.String(length=64), nullable=False, comment='SHA-256 hash of file content'),
    sa.Column('file_type', sa.Enum('DOCUMENT', 'IMAGE', 'AUDIO', 'VIDEO', 'SPREADSHEET', 'PRESENTATION', 'ARCHIVE', 'TEXT', 'CODE', 'OTHER', name='filetype'), nullable=False, comment='Detected file type category'),
    sa.Column('status', sa.Enum('UPLOADED', 'PROCESSING', 'PROCESSED', 'FAILED', 'QUARANTINED', 'DELETED', name='filestatus'), nullable=False, comment='Current processing status'),
    sa.Column('ticket_id', sa.UUID(), nullable=True, comment='Associated ticket ID'),
    sa.Column('uploaded_by_id', sa.UUID(), nullable=False, comment='User who uploaded the file'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True, comment='When processing started'),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True, comment='When processing completed'),
    sa.Column('processing_error', sa.Text(), nullable=True, comment='Error message if processing failed'),
    sa.Column('processing_attempts', sa.Integer(), nullable=False, comment='Number of processing attempts'),
    sa.Column('ai_analysis_version', sa.String(length=20), nullable=True, comment='Version of AI analysis used'),
    sa.Column('ai_confidence_score', sa.String(length=10), nullable=True, comment='AI confidence in analysis (0-1)'),
    sa.Column('extracted_text', sa.Text(), nullable=True, comment='Text extracted from file'),
    sa.Column('text_extraction_method', sa.String(length=50), nullable=True, comment='Method used for text extraction (ocr, parsing, etc.)'),
    sa.Column('text_extraction_confidence', sa.String(length=10), nullable=True, comment='Confidence score for text extraction'),
    sa.Column('transcription_text', sa.Text(), nullable=True, comment='Transcribed audio content'),
    sa.Column('transcription_language', sa.String(length=10), nullable=True, comment='Detected language of transcription'),
    sa.Column('transcription_confidence', sa.String(length=10), nullable=True, comment='Transcription confidence score'),
    sa.Column('transcription_duration_seconds', sa.Integer(), nullable=True, comment='Duration of audio file in seconds'),
    sa.Column('image_description', sa.Text(), nullable=True, comment='AI-generated description of image content'),
    sa.Column('detected_objects', sa.JSON(), nullable=True, comment='List of objects detected in image'),
    sa.Column('image_text_regions', sa.JSON(), nullable=True, comment='Text regions found in image with coordinates'),
    sa.Column('image_metadata', sa.JSON(), nullable=True, comment='EXIF and other image metadata'),
    sa.Column('content_summary', sa.Text(), nullable=True, comment='AI-generated summary of file content'),
    sa.Column('key_topics', sa.JSON(), nullable=True, comment='Key topics identified in content'),
    sa.Column('sentiment_analysis', sa.JSON(), nullable=True, comment='Sentiment analysis results'),
    sa.Column('language_detection', sa.String(length=10), nullable=True, comment='Detected primary language'),
    sa.Column('virus_scan_result', sa.String(length=20), nullable=True, comment='Virus scan result (clean, infected, unknown)'),
    sa.Column('virus_scan_at', sa.DateTime(timezone=True), nullable=True, comment='When virus scan was performed'),
    sa.Column('virus_details', sa.Text(), nullable=True, comment='Details if virus/malware detected'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='Whether file is publicly accessible'),
    sa.Column('access_permissions', sa.JSON(), nullable=True, comment='Specific access permissions for users/roles'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='Number of times file has been downloaded'),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True, comment='Last access timestamp'),
    sa.Column('retention_policy', sa.String(length=50), nullable=True, comment='Retention policy name'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When file should be automatically deleted'),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True, comment='When file was archived'),
    sa.Column('external_references', sa.JSON(), nullable=True, comment='References to file in external systems'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='User and AI-generated tags'),
    sa.Column('processing_time_seconds', sa.Integer(), nullable=True, comment='Total processing time in seconds'),
    sa.Column('file_quality_score', sa.String(length=10), nullable=True, comment='Quality assessment score (0-1)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_files_created_at'), 'files', ['created_at'], unique=False)
    op.create_index(op.f('ix_files_deleted_at'), 'files', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_files_expires_at'), 'files', ['expires_at'], unique=False)
    op.create_index(op.f('ix_files_file_hash'), 'files', ['file_hash'], unique=True)
    op.create_index(op.f('ix_files_file_path'), 'files', ['file_path'], unique=True)
    op.create_index(op.f('ix_files_file_type'), 'files', ['file_type'], unique=False)
    op.create_index(op.f('ix_files_is_deleted'), 'files', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_files_status'), 'files', ['status'], unique=False)
    op.create_index(op.f('ix_files_ticket_id'), 'files', ['ticket_id'], unique=False)
    op.create_index(op.f('ix_files_updated_at'), 'files', ['updated_at'], unique=False)
    op.create_index(op.f('ix_files_uploaded_by_id'), 'files', ['uploaded_by_id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('thread_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_html', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tool_calls', sa.JSON(), nullable=True),
    sa.Column('attachments', sa.JSON(), nullable=True),
    sa.Column('message_metadata', sa.JSON(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['thread_id'], ['threads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_messages_created_at', 'messages', ['created_at'], unique=False)
    op.create_index('idx_messages_role', 'messages', ['role'], unique=False)
    op.create_index('idx_messages_thread_id', 'messages', ['thread_id'], unique=False)
    op.create_index(op.f('ix_messages_deleted_at'), 'messages', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_messages_is_deleted'), 'messages', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_messages_updated_at'), 'messages', ['updated_at'], unique=False)
    op.create_table('agent_files',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this file belongs to'),
    sa.Column('file_id', sa.UUID(), nullable=False, comment='File attached to agent'),
    sa.Column('processing_status', sa.String(length=20), nullable=False, comment='Processing status (pending, processing, completed, failed)'),
    sa.Column('extracted_content', sa.Text(), nullable=True, comment='Text content extracted from file for agent context'),
    sa.Column('content_hash', sa.String(length=64), nullable=True, comment='SHA-256 hash of extracted content for deduplication'),
    sa.Column('content_length', sa.Integer(), nullable=True, comment='Length of extracted content in characters'),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='Order of file in agent context (0 = first)'),
    sa.Column('priority', sa.String(length=10), nullable=False, comment='File priority for context inclusion (high, normal, low)'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True, comment='When processing started'),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True, comment='When processing completed'),
    sa.Column('processing_error', sa.Text(), nullable=True, comment='Error message if processing failed'),
    sa.Column('attached_at', sa.DateTime(timezone=True), nullable=False, comment='When file was attached to agent'),
    sa.Column('attached_by_user_id', sa.UUID(), nullable=True, comment='User who attached the file'),
    sa.Column('last_used_in_context', sa.DateTime(timezone=True), nullable=True, comment='When this file was last used in agent context'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='Number of times file content was used in context'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint("priority IN ('high', 'normal', 'low')", name='ck_agent_file_priority'),
    sa.CheckConstraint("processing_status IN ('pending', 'processing', 'completed', 'failed')", name='ck_agent_file_processing_status'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['attached_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent file relationships with processing status and context metadata'
    )
    op.create_index(op.f('ix_agent_files_agent_id'), 'agent_files', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_files_content_hash'), 'agent_files', ['content_hash'], unique=False)
    op.create_index(op.f('ix_agent_files_created_at'), 'agent_files', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_files_deleted_at'), 'agent_files', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_files_file_id'), 'agent_files', ['file_id'], unique=False)
    op.create_index(op.f('ix_agent_files_is_deleted'), 'agent_files', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_files_processing_status'), 'agent_files', ['processing_status'], unique=False)
    op.create_index(op.f('ix_agent_files_updated_at'), 'agent_files', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_agent_files_updated_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_processing_status'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_is_deleted'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_file_id'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_deleted_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_created_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_content_hash'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_agent_id'), table_name='agent_files')
    op.drop_table('agent_files')
    op.drop_index(op.f('ix_messages_updated_at'), table_name='messages')
    op.drop_index(op.f('ix_messages_is_deleted'), table_name='messages')
    op.drop_index(op.f('ix_messages_deleted_at'), table_name='messages')
    op.drop_index('idx_messages_thread_id', table_name='messages')
    op.drop_index('idx_messages_role', table_name='messages')
    op.drop_index('idx_messages_created_at', table_name='messages')
    op.drop_table('messages')
    op.drop_index(op.f('ix_files_uploaded_by_id'), table_name='files')
    op.drop_index(op.f('ix_files_updated_at'), table_name='files')
    op.drop_index(op.f('ix_files_ticket_id'), table_name='files')
    op.drop_index(op.f('ix_files_status'), table_name='files')
    op.drop_index(op.f('ix_files_is_deleted'), table_name='files')
    op.drop_index(op.f('ix_files_file_type'), table_name='files')
    op.drop_index(op.f('ix_files_file_path'), table_name='files')
    op.drop_index(op.f('ix_files_file_hash'), table_name='files')
    op.drop_index(op.f('ix_files_expires_at'), table_name='files')
    op.drop_index(op.f('ix_files_deleted_at'), table_name='files')
    op.drop_index(op.f('ix_files_created_at'), table_name='files')
    op.drop_table('files')
    op.drop_index(op.f('ix_tickets_updated_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_title'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_status'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_sla_due_date'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_resolved_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_priority'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_organization_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_last_activity_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_is_deleted'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_integration_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_first_response_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_external_ticket_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_department'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_deleted_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_created_by_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_created_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_closed_at'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_category'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_assigned_to_id'), table_name='tickets')
    op.drop_table('tickets')
    op.drop_index(op.f('ix_threads_is_deleted'), table_name='threads')
    op.drop_index(op.f('ix_threads_deleted_at'), table_name='threads')
    op.drop_index('idx_threads_user_archived', table_name='threads')
    op.drop_index('idx_threads_updated_at', table_name='threads')
    op.drop_index('idx_threads_created_at', table_name='threads')
    op.drop_index('idx_threads_agent_org', table_name='threads')
    op.drop_table('threads')
    op.drop_index(op.f('ix_ai_agent_configs_updated_at'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_is_deleted'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_is_active'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_environment'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_deleted_at'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_created_at'), table_name='ai_agent_configs')
    op.drop_index(op.f('ix_ai_agent_configs_agent_type'), table_name='ai_agent_configs')
    op.drop_table('ai_agent_configs')
    op.drop_index(op.f('ix_agent_usage_stats_updated_at'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_period_start'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_period_end'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_is_deleted'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_deleted_at'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_created_at'), table_name='agent_usage_stats')
    op.drop_index(op.f('ix_agent_usage_stats_agent_id'), table_name='agent_usage_stats')
    op.drop_table('agent_usage_stats')
    op.drop_index(op.f('ix_agent_tasks_updated_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_task_type'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_status'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_scheduled_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_priority'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_is_deleted'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_deleted_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_created_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_correlation_id'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_celery_task_id'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_agent_id'), table_name='agent_tasks')
    op.drop_table('agent_tasks')
    op.drop_index(op.f('ix_agent_history_updated_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_is_deleted'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_field_changed'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_deleted_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_created_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_changed_by_user_id'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_change_type'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_change_timestamp'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_agent_id'), table_name='agent_history')
    op.drop_table('agent_history')
    op.drop_index(op.f('ix_agent_actions_updated_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_success'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_started_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_session_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_is_deleted'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_deleted_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_created_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_conversation_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_agent_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_action_type'), table_name='agent_actions')
    op.drop_table('agent_actions')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_organization_id'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_is_admin'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_external_auth_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index(op.f('ix_users_api_key_hash'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_integrations_updated_at'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_status'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_platform_name'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_organization_id'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_is_deleted'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_integration_category'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_enabled'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_deleted_at'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_created_at'), table_name='integrations')
    op.drop_table('integrations')
    op.drop_index(op.f('ix_agents_updated_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_status'), table_name='agents')
    op.drop_index(op.f('ix_agents_organization_id'), table_name='agents')
    op.drop_index(op.f('ix_agents_is_deleted'), table_name='agents')
    op.drop_index(op.f('ix_agents_is_active'), table_name='agents')
    op.drop_index(op.f('ix_agents_deleted_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_created_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_agent_type'), table_name='agents')
    op.drop_table('agents')
    op.drop_index(op.f('ix_organizations_updated_at'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_is_enabled'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_is_deleted'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_domain'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_deleted_at'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_custom_domain'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_created_at'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###