"""add_integration_result_field_to_tickets

Revision ID: 2ffad472666e
Revises: e0e4af067228
Create Date: 2025-09-19 15:17:28.260106

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2ffad472666e'
down_revision = 'e0e4af067228'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Organization this agent belongs to (NULL for system agents)',
               existing_comment='Organization this agent belongs to (NULL for system agents)')
    op.drop_index(op.f('idx_files_organization_id'), table_name='files')
    op.create_index(op.f('ix_files_organization_id'), 'files', ['organization_id'], unique=False)
    op.create_foreign_key(None, 'files', 'organizations', ['organization_id'], ['id'])
    op.drop_column('files', 'transcription_confidence')
    op.drop_column('files', 'text_extraction_confidence')
    op.drop_column('files', 'image_metadata')
    op.drop_column('files', 'text_extraction_method')
    op.drop_column('files', 'transcription_duration_seconds')
    op.drop_column('files', 'detected_objects')
    op.drop_column('files', 'transcription_language')
    op.drop_column('files', 'image_text_regions')
    op.drop_column('files', 'transcription_text')
    op.drop_column('files', 'image_description')
    op.drop_column('files', 'extracted_text')
    op.alter_column('messages', 'attachments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment="Array of file references: [{'file_id':'uuid'}]",
               existing_comment='Array of file references: [{"file_id":"uuid"}]',
               existing_nullable=True)
    op.drop_index(op.f('idx_messages_attachments'), table_name='messages', postgresql_ops={'(attachments::jsonb)': 'jsonb_path_ops'}, postgresql_using='gin')
    op.add_column('tickets', sa.Column('integration_result', sa.JSON(), nullable=True, comment='Complete integration creation result with status, IDs, and response details'))
    op.alter_column('tickets', 'attachments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment="Array of file references: [{'file_id':'uuid'}]",
               existing_comment='Array of file references: [{"file_id":"uuid"}]',
               existing_nullable=True)
    op.drop_index(op.f('idx_tickets_attachments'), table_name='tickets', postgresql_ops={'(attachments::jsonb)': 'jsonb_path_ops'}, postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_tickets_attachments'), 'tickets', [sa.literal_column('(attachments::jsonb)')], unique=False, postgresql_ops={'(attachments::jsonb)': 'jsonb_path_ops'}, postgresql_using='gin')
    op.alter_column('tickets', 'attachments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Array of file references: [{"file_id":"uuid"}]',
               existing_comment="Array of file references: [{'file_id':'uuid'}]",
               existing_nullable=True)
    op.drop_column('tickets', 'integration_result')
    op.create_index(op.f('idx_messages_attachments'), 'messages', [sa.literal_column('(attachments::jsonb)')], unique=False, postgresql_ops={'(attachments::jsonb)': 'jsonb_path_ops'}, postgresql_using='gin')
    op.alter_column('messages', 'attachments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Array of file references: [{"file_id":"uuid"}]',
               existing_comment="Array of file references: [{'file_id':'uuid'}]",
               existing_nullable=True)
    op.add_column('files', sa.Column('extracted_text', sa.TEXT(), autoincrement=False, nullable=True, comment='Text extracted from file'))
    op.add_column('files', sa.Column('image_description', sa.TEXT(), autoincrement=False, nullable=True, comment='AI-generated description of image content'))
    op.add_column('files', sa.Column('transcription_text', sa.TEXT(), autoincrement=False, nullable=True, comment='Transcribed audio content'))
    op.add_column('files', sa.Column('image_text_regions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Text regions found in image with coordinates'))
    op.add_column('files', sa.Column('transcription_language', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Detected language of transcription'))
    op.add_column('files', sa.Column('detected_objects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='List of objects detected in image'))
    op.add_column('files', sa.Column('transcription_duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True, comment='Duration of audio file in seconds'))
    op.add_column('files', sa.Column('text_extraction_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Method used for text extraction (ocr, parsing, etc.)'))
    op.add_column('files', sa.Column('image_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='EXIF and other image metadata'))
    op.add_column('files', sa.Column('text_extraction_confidence', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Confidence score for text extraction'))
    op.add_column('files', sa.Column('transcription_confidence', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Transcription confidence score'))
    op.drop_constraint(None, 'files', type_='foreignkey')
    op.drop_index(op.f('ix_files_organization_id'), table_name='files')
    op.create_index(op.f('idx_files_organization_id'), 'files', ['organization_id'], unique=False)
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Organization this agent belongs to (NULL for system agents)',
               existing_comment='Organization this agent belongs to')
    # ### end Alembic commands ###