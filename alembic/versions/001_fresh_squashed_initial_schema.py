"""squashed_initial_schema

Revision ID: 001_fresh
Revises: 5f24b7aa71a4
Create Date: 2025-10-01 15:52:56.215252

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001_fresh'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('agent_actions', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_files', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_history', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_tasks', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_usage_stats', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               comment='Organization this agent belongs to',
               existing_comment='Organization this agent belongs to (NULL for system agents)',
               existing_nullable=True)
    op.alter_column('agents', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('ai_agent_configs', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('api_tokens', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('avatar_variants', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('file_storage_metadata', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('files', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('integrations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('messages', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('organization_invitations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('organizations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('threads', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('ticket_comments', 'external_format_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_comment='Platform-specific formatted content (e.g., ADF for JIRA, rich text for ServiceNow)',
               existing_nullable=True)
    op.alter_column('ticket_comments', 'is_internal',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_comment='Whether comment is internal-only or visible to customers',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               comment=None,
               existing_comment='Primary key for comment',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               comment=None,
               existing_comment='Timestamp when comment was created',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               comment=None,
               existing_comment='Timestamp when comment was last updated',
               existing_nullable=False)
    op.create_index(op.f('ix_ticket_comments_author_email'), 'ticket_comments', ['author_email'], unique=False)
    op.create_index(op.f('ix_ticket_comments_created_at'), 'ticket_comments', ['created_at'], unique=False)
    op.create_index(op.f('ix_ticket_comments_deleted_at'), 'ticket_comments', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_ticket_comments_external_comment_id'), 'ticket_comments', ['external_comment_id'], unique=False)
    op.create_index(op.f('ix_ticket_comments_integration_id'), 'ticket_comments', ['integration_id'], unique=False)
    op.create_index(op.f('ix_ticket_comments_ticket_id'), 'ticket_comments', ['ticket_id'], unique=False)
    op.create_index(op.f('ix_ticket_comments_updated_at'), 'ticket_comments', ['updated_at'], unique=False)
    op.create_unique_constraint(None, 'ticket_comments', ['id'])
    op.drop_table_comment(
        'ticket_comments',
        existing_comment='Comments on support tickets with generic integration platform support',
        schema=None
    )
    op.alter_column('tickets', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.drop_column('tickets', 'description_adf')
    op.drop_column('tickets', 'description_html')
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.add_column('tickets', sa.Column('description_html', sa.TEXT(), autoincrement=False, nullable=True, comment='Rendered HTML description for display'))
    op.add_column('tickets', sa.Column('description_adf', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Rich text description in ADF format'))
    op.alter_column('tickets', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.create_table_comment(
        'ticket_comments',
        'Comments on support tickets with generic integration platform support',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'ticket_comments', type_='unique')
    op.drop_index(op.f('ix_ticket_comments_updated_at'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_ticket_id'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_integration_id'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_external_comment_id'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_deleted_at'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_created_at'), table_name='ticket_comments')
    op.drop_index(op.f('ix_ticket_comments_author_email'), table_name='ticket_comments')
    op.alter_column('ticket_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               comment='Timestamp when comment was last updated',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               comment='Timestamp when comment was created',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               comment='Primary key for comment',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'is_internal',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_comment='Whether comment is internal-only or visible to customers',
               existing_nullable=False)
    op.alter_column('ticket_comments', 'external_format_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_comment='Platform-specific formatted content (e.g., ADF for JIRA, rich text for ServiceNow)',
               existing_nullable=True)
    op.alter_column('threads', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('organizations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('organization_invitations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('messages', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('integrations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('files', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('file_storage_metadata', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('avatar_variants', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('api_tokens', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('ai_agent_configs', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agents', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Organization this agent belongs to (NULL for system agents)',
               existing_comment='Organization this agent belongs to')
    op.alter_column('agent_usage_stats', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_tasks', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_history', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_files', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    op.alter_column('agent_actions', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Soft delete timestamp - NULL means not deleted',
               existing_nullable=True)
    # ### end Alembic commands ###